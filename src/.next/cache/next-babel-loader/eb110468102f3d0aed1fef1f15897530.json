{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button, Input } from 'components';\nimport withExtendClassName from 'hocs/withExtendClassName';\nimport { classNameHelper } from 'utils';\nexport var InitArrayInput = /*#__PURE__*/function (_Component) {\n  _inherits(InitArrayInput, _Component);\n\n  var _super = _createSuper(InitArrayInput);\n\n  function InitArrayInput(props) {\n    var _this;\n\n    _classCallCheck(this, InitArrayInput);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"inputRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (value) {\n      var _this$getArrayReprese = _this.getArrayRepresentationFromInputText(value.toString()),\n          arrayValue = _this$getArrayReprese.value,\n          error = _this$getArrayReprese.error;\n\n      _this.setState({\n        input: arrayValue,\n        error: error\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"focusToInput\", function () {\n      var inputElement = _this.inputRef.current;\n      var htmlInput = ReactDOM.findDOMNode(inputElement);\n      htmlInput === null || htmlInput === void 0 ? void 0 : htmlInput.focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function () {\n      var onSubmit = _this.props.onSubmit;\n      var _this$state = _this.state,\n          isTyping = _this$state.isTyping,\n          input = _this$state.input;\n\n      if (!isTyping) {\n        _this.setState({\n          isTyping: true\n        }, _this.focusToInput);\n      } else {\n        var linkedListData = input === undefined || !input.length ? _this.generateRandomData() : input;\n        onSubmit(linkedListData);\n      }\n    });\n\n    _this.state = {\n      input: [],\n      error: null,\n      isTyping: false\n    };\n    _this.inputRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(InitArrayInput, [{\n    key: \"getArrayRepresentationFromInputText\",\n    value: function getArrayRepresentationFromInputText(inputText) {\n      var regex = /^\\[([\\d,\\s]+)\\]$/;\n      var match = inputText.match(regex);\n      if (!match) return {\n        value: [],\n        error: 'Sai cú pháp'\n      };\n      return {\n        value: match[1].split(',').map(function (string) {\n          return _parseInt(string);\n        }).filter(function (item) {\n          return !!item;\n        }),\n        error: null\n      };\n    }\n  }, {\n    key: \"produceClassName\",\n    value: function produceClassName() {\n      var isTyping = this.state.isTyping;\n      return classNameHelper({\n        base: 'init-linked-list-button__wrapper',\n        typing: isTyping\n      });\n    }\n  }, {\n    key: \"generateRandomData\",\n    value: function generateRandomData() {\n      var defaultLength = this.props.defaultLength;\n      var length = defaultLength || 8;\n      return Array(length).fill(0).map(function () {\n        return Math.round(Math.random() * 20);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isTyping = this.state.isTyping;\n      var _this$props = this.props,\n          className = _this$props.className,\n          text = _this$props.text;\n      return __jsx(\"div\", {\n        className: this.produceClassName()\n      }, __jsx(Button, {\n        type: \"primary\",\n        className: className,\n        onClick: this.handleClick\n      }, isTyping ? 'Initialize' : text, __jsx(Input, {\n        ref: this.inputRef,\n        onChange: this.handleChange,\n        onClick: function onClick(e) {\n          return e.stopPropagation();\n        },\n        placeholder: \"[5,2,3,7,4]\"\n      })));\n    }\n  }]);\n\n  return InitArrayInput;\n}(Component);\nexport default withExtendClassName('f-big-2 px-6 py-2')(InitArrayInput);","map":null,"metadata":{},"sourceType":"module"}