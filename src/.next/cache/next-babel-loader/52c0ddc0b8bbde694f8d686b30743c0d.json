{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _compose from \"lodash/fp/compose\";\nimport produce from 'immer';\n\n// Nhận vào trạng thái hiện tại của data structure\n// và operation tương ứng. Trả về trạng thái mới\nvar transformBSTModel = function transformBSTModel(currentModel, operation, payload) {\n  switch (operation) {\n    case 'visited':\n      {\n        var _payload = _slicedToArray(payload, 1),\n            nodeKeyToVisit = _payload[0];\n\n        return produce(currentModel, function (draft) {\n          var treeNode = draft.find(function (_ref) {\n            var key = _ref.key;\n            return key === nodeKeyToVisit;\n          });\n          if (treeNode) treeNode.visited = true;\n        });\n      }\n\n    case 'focus':\n      {\n        var _payload2 = _slicedToArray(payload, 1),\n            nodeKeyToFocus = _payload2[0];\n\n        return produce(currentModel, function (draft) {\n          var treeNode = draft.find(function (_ref2) {\n            var key = _ref2.key;\n            return key === nodeKeyToFocus;\n          });\n          if (treeNode) treeNode.focus = true;\n        });\n      }\n\n    case 'resetFocus':\n      {\n        return produce(currentModel, function (draft) {\n          draft.forEach(function (node) {\n            return node.focus = false;\n          });\n        });\n      }\n\n    case 'insert':\n      {\n        var _payload3 = _slicedToArray(payload, 2),\n            parentKey = _payload3[0],\n            newNode = _payload3[1];\n\n        return produce(currentModel, function (draft) {\n          var parentNode = draft.find(function (_ref3) {\n            var key = _ref3.key;\n            return key === parentKey;\n          });\n\n          if (parentNode) {\n            if (newNode.value > parentNode.value) {\n              parentNode.right = newNode.key;\n            } else {\n              parentNode.left = newNode.key;\n            }\n\n            draft.push(newNode);\n          }\n        });\n      }\n\n    case 'delete':\n      {\n        var _payload4 = _slicedToArray(payload, 1),\n            keyToDelete = _payload4[0];\n\n        return produce(currentModel, function (draft) {\n          var nodeToDelete = draft.find(function (_ref4) {\n            var key = _ref4.key;\n            return key === keyToDelete;\n          });\n          if (nodeToDelete) nodeToDelete.visible = false;\n        });\n      }\n\n    case 'focusToDelete':\n      {\n        var _payload5 = _slicedToArray(payload, 1),\n            _keyToDelete = _payload5[0];\n\n        return produce(currentModel, function (draft) {\n          var nodeToDelete = draft.find(function (_ref5) {\n            var key = _ref5.key;\n            return key === _keyToDelete;\n          });\n          if (nodeToDelete) nodeToDelete.aboutToDelete = true;\n        });\n      }\n\n    case 'setValue':\n      {\n        var _payload6 = _slicedToArray(payload, 2),\n            value = _payload6[0],\n            keyToSet = _payload6[1];\n\n        return produce(currentModel, function (draft) {\n          var nodeToSetValue = draft.find(function (_ref6) {\n            var key = _ref6.key;\n            return key === keyToSet;\n          });\n          if (nodeToSetValue) nodeToSetValue.value = value;\n        });\n      }\n\n    case 'label':\n      {\n        var _payload7 = _slicedToArray(payload, 3),\n            label = _payload7[0],\n            nodeKeyToLabel = _payload7[1],\n            removeThisLabelInOtherNode = _payload7[2];\n\n        return produce(currentModel, function (draft) {\n          if (removeThisLabelInOtherNode) {\n            draft.forEach(function (node) {\n              var oldLabel = node.label;\n\n              if (oldLabel) {\n                //@ts-ignore\n                var newLabel = oldLabel.filter(function (item) {\n                  return item !== label;\n                });\n                node.label = newLabel;\n              }\n            });\n          }\n\n          var nodeToLabel = draft.find(function (_ref7) {\n            var key = _ref7.key;\n            return key === nodeKeyToLabel;\n          });\n\n          if (nodeToLabel) {\n            var oldLabel = nodeToLabel.label || []; //@ts-ignore\n\n            nodeToLabel.label = oldLabel.concat(label);\n          }\n        });\n      }\n\n    case 'resetAll':\n      {\n        // Reset focus, visited and label\n        var listTransformation = ['resetFocus', 'resetVisited', 'resetLabel'].map(function (method) {\n          return function (model) {\n            return transformBSTModel(model, method, []);\n          };\n        });\n        return _compose(listTransformation)(currentModel);\n      }\n\n    case 'resetVisited':\n      {\n        return produce(currentModel, function (draft) {\n          draft.forEach(function (item) {\n            return item.visited = false;\n          });\n        });\n      }\n\n    case 'resetLabel':\n      {\n        return produce(currentModel, function (draft) {\n          draft.forEach(function (item) {\n            return item.label = [];\n          });\n        });\n      }\n\n    default:\n      return currentModel;\n  }\n};\n\nexport default transformBSTModel;","map":null,"metadata":{},"sourceType":"module"}