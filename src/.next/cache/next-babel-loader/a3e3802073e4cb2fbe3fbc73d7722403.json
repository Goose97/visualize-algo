{"ast":null,"code":"import _omit from \"lodash/omit\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { CheckOutlined } from '@ant-design/icons';\nimport { withExtendClassName } from 'hocs';\nimport { classNameHelper } from 'utils';\nexport class Input extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleInputValueChange\", e => {\n      const {\n        onChange\n      } = this.props;\n      const newValue = e.target.value;\n      onChange && onChange(newValue);\n    });\n  }\n\n  produceClassName() {\n    const {\n      className,\n      status\n    } = this.props;\n    let classNameObject = {\n      base: className\n    }; //@ts-ignore\n\n    if (status) classNameObject[status] = status;\n    return classNameHelper(classNameObject);\n  }\n\n  renderIconAccordingToStatus() {\n    const {\n      status\n    } = this.props;\n\n    switch (status) {\n      case 'success':\n        return __jsx(\"span\", {\n          className: \"visual-algo-input__status-icon success\"\n        }, __jsx(CheckOutlined, null));\n\n      case 'error':\n        return __jsx(\"span\", {\n          className: \"visual-algo-input__status-icon error\"\n        }, \"\\u2716\");\n\n      default:\n        return null;\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"visual-algo-input__wrapper\"\n    }, __jsx(\"input\", _extends({}, _omit(this.props, ['state', 'className']), {\n      onChange: this.handleInputValueChange,\n      className: this.produceClassName()\n    })), this.renderIconAccordingToStatus());\n  }\n\n}\nexport default withExtendClassName('visual-algo-input__input')(Input);","map":null,"metadata":{},"sourceType":"module"}