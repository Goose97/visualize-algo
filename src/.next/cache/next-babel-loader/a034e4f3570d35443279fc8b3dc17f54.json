{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from 'react';\nimport { GraphDS, StackDS, ArrayDS, QueueDS, CanvasContainer, InitGraphInput } from 'components';\nimport withDSPage from 'hocs/withDSPage';\nimport { extractInstructionFromDescription } from 'utils';\nimport { graphInstruction } from 'instructions/Graph';\nimport { code, explanation } from 'codes/Graph';\nimport { QUEUE_BLOCK_WIDTH } from \"../constants\"; // const data =\n// '[{\"x\":0,\"y\":0,\"key\":1,\"adjacentNodes\":[5,3,6],\"value\":1,\"visible\":true},{\"x\":74,\"y\":144,\"key\":2,\"adjacentNodes\":[5,4],\"value\":2,\"visible\":true},{\"x\":316,\"y\":175,\"key\":3,\"adjacentNodes\":[5,1],\"value\":3,\"visible\":true},{\"x\":370,\"y\":41,\"key\":4,\"adjacentNodes\":[5,2,6],\"value\":4,\"visible\":true},{\"x\":206,\"y\":237,\"key\":5,\"adjacentNodes\":[1,2,3,4],\"value\":5,\"visible\":true},{\"x\":531,\"y\":91,\"key\":6,\"adjacentNodes\":[1,4],\"value\":6,\"visible\":true}]';\n\nexport class BinarySearchTreePage extends Component {\n  getWidthOfDS(graphModel, dataStructure) {\n    switch (dataStructure) {\n      case 'graph':\n        {\n          if (!graphModel) return 0;\n          return Math.max(...graphModel.map(({\n            x\n          }) => x));\n        }\n\n      case 'queue':\n        {\n          if (!graphModel) return 0;\n          return graphModel.length * QUEUE_BLOCK_WIDTH + 50;\n        }\n    }\n  }\n\n  renderExtraDSForApi() {\n    const {\n      currentApi,\n      data,\n      stepDescription,\n      currentStep\n    } = this.props;\n\n    switch (currentApi) {\n      case 'dfs':\n        {\n          const stackInstruction = extractInstructionFromDescription(stepDescription, 'stack');\n          const arrayInstruction = extractInstructionFromDescription(stepDescription, 'array');\n          const widthOfGraph = this.getWidthOfDS(data, 'graph');\n          const baseProps = {\n            initialData: [],\n            currentStep,\n            totalStep: stepDescription.length - 1\n          };\n          return __jsx(React.Fragment, null, __jsx(StackDS, _extends({\n            x: widthOfGraph + 400,\n            y: 300,\n            instructions: stackInstruction\n          }, baseProps)), __jsx(ArrayDS, _extends({\n            x: widthOfGraph + 400,\n            y: 450,\n            instructions: arrayInstruction,\n            blockType: \"block\"\n          }, baseProps)));\n        }\n\n      case 'bfs':\n        const queueInstruction = extractInstructionFromDescription(stepDescription, 'queue');\n        const arrayInstruction = extractInstructionFromDescription(stepDescription, 'array');\n        const widthOfGraph = this.getWidthOfDS(data, 'graph');\n        const widthOfQueue = this.getWidthOfDS(data, 'queue');\n        const baseProps = {\n          initialData: [],\n          currentStep,\n          totalStep: stepDescription.length - 1\n        };\n        return __jsx(React.Fragment, null, __jsx(QueueDS, _extends({\n          x: widthOfGraph + widthOfQueue / 3 + 400,\n          y: 300,\n          instructions: queueInstruction\n        }, baseProps)), __jsx(ArrayDS, _extends({\n          x: widthOfGraph + 400,\n          y: 450,\n          instructions: arrayInstruction,\n          blockType: \"block\"\n        }, baseProps)));\n    }\n  }\n\n  render() {\n    const {\n      data,\n      onDataChange,\n      currentStep,\n      stepDescription,\n      autoPlay,\n      executedApiCount,\n      sideBarWidth,\n      onExecuteApi\n    } = this.props;\n    const graphInstruction = extractInstructionFromDescription(stepDescription, 'graph');\n    return data ? __jsx(CanvasContainer, null, __jsx(GraphDS, {\n      x: 200,\n      y: 200,\n      instructions: graphInstruction,\n      initialData: data,\n      currentStep: currentStep,\n      totalStep: stepDescription.length - 1,\n      handleExecuteApi: onExecuteApi,\n      interactive: true,\n      dropdownDisabled: autoPlay,\n      executedApiCount: executedApiCount\n    }), this.renderExtraDSForApi()) : __jsx(\"div\", {\n      className: \"h-full fx-center linked-list-page__init-button\",\n      style: {\n        transform: `translateX(-${(sideBarWidth || 0) / 2}px)`\n      }\n    }, __jsx(InitGraphInput, {\n      onSubmit: onDataChange\n    }));\n  }\n\n}\nexport default withDSPage({\n  code,\n  explanation,\n  instructionGenerator: graphInstruction\n})(BinarySearchTreePage);","map":null,"metadata":{},"sourceType":"module"}