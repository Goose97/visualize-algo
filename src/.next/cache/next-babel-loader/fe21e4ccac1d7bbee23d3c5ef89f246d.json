{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _compose from \"lodash/fp/compose\";\nimport _uniq from \"lodash/uniq\";\nimport produce from 'immer';\n\n// Nhận vào trạng thái hiện tại của data structure\n// và operation tương ứng. Trả về trạng thái mới\nvar transformGraphModel = function transformGraphModel(currentModel, operation, payload) {\n  switch (operation) {\n    case 'addEdge':\n      {\n        var _payload = _slicedToArray(payload, 2),\n            nodeAKey = _payload[0],\n            nodeBKey = _payload[1];\n\n        return produce(currentModel, function (draft) {\n          var nodeA = draft.find(function (_ref) {\n            var key = _ref.key;\n            return key === nodeAKey;\n          });\n          var nodeB = draft.find(function (_ref2) {\n            var key = _ref2.key;\n            return key === nodeBKey;\n          });\n          if (!nodeA || !nodeB) return;\n          nodeA.adjacentNodes.push(nodeBKey);\n          nodeA.adjacentNodes = _uniq(nodeA.adjacentNodes);\n          nodeB.adjacentNodes.push(nodeAKey);\n          nodeB.adjacentNodes = _uniq(nodeB.adjacentNodes);\n        });\n      }\n\n    case 'focus':\n      {\n        var _payload2 = _slicedToArray(payload, 2),\n            key = _payload2[0],\n            keepOtherNodeFocus = _payload2[1];\n\n        return produce(currentModel, function (draft) {\n          if (!keepOtherNodeFocus) draft.forEach(function (item) {\n            return item.focus = false;\n          }); // Nếu index === null nghĩa là đang unfocus tất cả các node\n\n          if (key !== null) {\n            var nodeToFocus = draft.find(function (_ref3) {\n              var nodeKey = _ref3.key;\n              return nodeKey === key;\n            });\n            if (nodeToFocus) nodeToFocus.focus = true;\n          }\n        });\n      }\n\n    case 'visited':\n      {\n        var _payload3 = _slicedToArray(payload, 1),\n            keyToVisited = _payload3[0];\n\n        return produce(currentModel, function (draft) {\n          var nodeToVisited = draft.find(function (_ref4) {\n            var key = _ref4.key;\n            return key === keyToVisited;\n          });\n          if (nodeToVisited) nodeToVisited.visited = true;\n        });\n      }\n\n    case 'highlight':\n      {\n        var _payload4 = _slicedToArray(payload, 1),\n            keyToHighlight = _payload4[0];\n\n        return produce(currentModel, function (draft) {\n          var listKey = _Array$isArray(keyToHighlight) ? keyToHighlight : [keyToHighlight];\n          listKey.forEach(function (item) {\n            var nodeToHighlight = draft.find(function (_ref5) {\n              var key = _ref5.key;\n              return key === item;\n            });\n            if (nodeToHighlight) nodeToHighlight.circleAround = true;\n          });\n        });\n      }\n\n    case 'highlightEdge':\n      {\n        var _payload5 = _slicedToArray(payload, 2),\n            from = _payload5[0],\n            to = _payload5[1];\n\n        return produce(currentModel, function (draft) {\n          var fromNode = draft.find(function (_ref6) {\n            var key = _ref6.key;\n            return key === from;\n          });\n          var toNode = draft.find(function (_ref7) {\n            var key = _ref7.key;\n            return key === to;\n          });\n          if (!fromNode || !toNode) return;\n          {\n            var oldHighlightEdges = fromNode.highlightEdges || [];\n\n            var newHighlightEdges = _uniq(oldHighlightEdges.concat(to));\n\n            fromNode.highlightEdges = newHighlightEdges;\n          }\n          {\n            var _oldHighlightEdges = toNode.highlightEdges || [];\n\n            var _newHighlightEdges = _uniq(_oldHighlightEdges.concat(from));\n\n            toNode.highlightEdges = _newHighlightEdges;\n          }\n        });\n      }\n\n    case 'resetAll':\n      {\n        // Reset focus, visited and label\n        var listTransformation = ['resetFocus', 'resetVisited', 'resetLabel', 'resetHighlight'].map(function (method) {\n          return function (model) {\n            return transformGraphModel(model, method, []);\n          };\n        });\n        return _compose(listTransformation)(currentModel);\n      }\n\n    case 'resetFocus':\n      {\n        return produce(currentModel, function (draft) {\n          draft.forEach(function (item) {\n            return item.focus = false;\n          });\n        });\n      }\n\n    case 'resetVisited':\n      {\n        return produce(currentModel, function (draft) {\n          draft.forEach(function (item) {\n            return item.visited = false;\n          });\n        });\n      }\n\n    case 'resetLabel':\n      {\n        return produce(currentModel, function (draft) {\n          draft.forEach(function (item) {\n            return item.label = [];\n          });\n        });\n      }\n\n    case 'resetHighlight':\n      {\n        // reset highlight of node and edges\n        return produce(currentModel, function (draft) {\n          draft.forEach(function (item) {\n            item.circleAround = false;\n            item.highlightEdges = [];\n          });\n        });\n      }\n\n    default:\n      return currentModel;\n  }\n};\n\nexport default transformGraphModel;","map":null,"metadata":{},"sourceType":"module"}