{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { CanvasContainer, HashTableDS, InitHashTableInput } from 'components';\nimport withDSPage from 'hocs/withDSPage';\nimport { extractInstructionFromDescription } from 'utils';\nimport { hashTableInstruction } from 'instructions/HashTable';\nimport { code, explanation } from \"../codes/HashTable\";\nexport class HashTablePage extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleExecuteApi\", (api, params) => {\n      const {\n        onExecuteApi\n      } = this.props;\n      const {\n        collisionResolution\n      } = this.state;\n      onExecuteApi(api, _objectSpread({}, params, {\n        collisionResolution\n      }));\n    });\n\n    this.state = {\n      collisionResolution: 'chaining'\n    };\n  }\n\n  render() {\n    const {\n      data,\n      onDataChange,\n      currentStep,\n      stepDescription,\n      autoPlay,\n      executedApiCount,\n      sideBarWidth\n    } = this.props;\n    const {\n      collisionResolution\n    } = this.state;\n    const hashTableInstruction = extractInstructionFromDescription(stepDescription, 'hashTable');\n    return data ? __jsx(CanvasContainer, null, __jsx(HashTableDS, {\n      x: 100,\n      y: 200,\n      blockType: \"block\",\n      initialData: data,\n      currentStep: currentStep,\n      instructions: hashTableInstruction,\n      totalStep: stepDescription.length - 1 //@ts-ignore\n      ,\n      handleExecuteApi: this.handleExecuteApi,\n      collisionResolution: collisionResolution,\n      interactive: true,\n      dropdownDisabled: autoPlay,\n      executedApiCount: executedApiCount\n    })) : __jsx(\"div\", {\n      className: \"h-full fx-center linked-list-page__init-button\",\n      style: {\n        transform: `translateX(-${(sideBarWidth || 0) / 2}px)`\n      }\n    }, __jsx(InitHashTableInput, {\n      onSubmit: (data, collisionResolution) => {\n        onDataChange(data);\n        this.setState({\n          collisionResolution\n        });\n      }\n    }));\n  }\n\n}\nexport default withDSPage({\n  code,\n  explanation,\n  instructionGenerator: hashTableInstruction\n})(HashTablePage);","map":null,"metadata":{},"sourceType":"module"}