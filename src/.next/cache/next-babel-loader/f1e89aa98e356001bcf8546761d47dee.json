{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Router, { withRouter } from 'next/router';\nimport { TopicCard, HomePageTitle } from 'components';\nvar availableTopics = [{\n  title: 'Linked List',\n  description: 'A linked list is a series of connected \"nodes\" that contains the \"address\" of the next node. Basic operation: search, insert, delete node.',\n  key: 'linked_list'\n}, {\n  title: 'Array',\n  description: 'Data structure to store a collection of the same type data in continuous memory locations. Learn about some basic array sorting algorithm.',\n  key: 'array'\n}, {\n  title: 'Binary Search Tree',\n  description: 'A tree based data structure that quickly allows us to maintain a sorted list of numbers. Basic operation: search, insert, delete node.',\n  key: 'binary_search_tree'\n}, {\n  title: 'Graph',\n  description: 'A graph data structure is a collection of nodes that have data and are connected to other nodes. Learn about some basic graph traversing algorithms.',\n  key: 'graph'\n}, {\n  title: 'Hash Table',\n  description: 'Hash table is a data structure that represents data in the form of key-value pairs. Basic operation: get key value, insert or update key.',\n  key: 'hash_table'\n}];\n\nvar Home = /*#__PURE__*/function (_Component) {\n  _inherits(Home, _Component);\n\n  var _super = _createSuper(Home);\n\n  function Home() {\n    _classCallCheck(this, Home);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      availableTopics.forEach(function (_ref) {\n        var key = _ref.key;\n        var url = \"/\".concat(key);\n        Router.prefetch(url);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"home-page__wrapper\"\n      }, __jsx(HomePageTitle, null), __jsx(\"div\", {\n        className: \"home-page-cards__wrapper px-12 py-4\"\n      }, availableTopics.map(function (_ref2) {\n        var title = _ref2.title,\n            description = _ref2.description,\n            key = _ref2.key;\n        return __jsx(TopicCard, {\n          title: title,\n          description: description,\n          onClick: function onClick() {\n            return Router.push(\"/\".concat(key));\n          },\n          imgSrc: \"/images/\".concat(key, \".png\"),\n          key: key\n        });\n      })));\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nexport default withRouter(Home);","map":null,"metadata":{},"sourceType":"module"}