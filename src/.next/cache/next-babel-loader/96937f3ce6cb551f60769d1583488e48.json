{"ast":null,"code":"import { Instructions } from 'instructions';\nimport { initArray } from \"./helper\";\nexport var arrayInstruction = function arrayInstruction(data, operation, parameters) {\n  switch (operation) {\n    case 'bubbleSort':\n      return bubbleSortInstruction(data, parameters);\n\n    case 'selectionSort':\n      return selectionSortInstruction(data, parameters);\n\n    case 'insertionSort':\n      return insertionSortInstruction(data, parameters);\n\n    default:\n      return [];\n  }\n};\n\nvar selectionSortInstruction = function selectionSortInstruction(data, _params) {\n  var instructions = new Instructions();\n  instructions.setDuration(750);\n  var array = initArray(data);\n  var codeLines = getCodeLine('selectionSort');\n  var len = array.length;\n  var i, j, min;\n  instructions.setCodeLine(codeLines.init);\n\n  for (i = 0; i < len; i++) {\n    instructions.setCodeLine(codeLines.iteration);\n    min = i;\n    instructions.pushActionsAndEndStep('array', [{\n      name: 'setUnsortedLine',\n      params: [array[i].key]\n    }, {\n      name: 'label',\n      params: [array[i].key, 'min']\n    }]);\n\n    for (j = i + 1; j < len; j++) {\n      instructions.pushActionsAndEndStep('array', [{\n        name: 'resetFocusAll',\n        params: []\n      }, {\n        name: 'focus',\n        params: [array[min].key]\n      }, {\n        name: 'focus',\n        params: [array[j].key]\n      }]);\n      instructions.setCodeLine(codeLines.findMin);\n      instructions.setCodeLine(codeLines.compare);\n\n      if (array[min].val > array[j].val) {\n        instructions.pushActionsAndEndStep('array', [{\n          name: 'resetFocus',\n          params: [array[min].key]\n        }, {\n          name: 'unlabel',\n          params: [array[min].key]\n        }, {\n          name: 'label',\n          params: [array[j].key, 'min']\n        }]);\n        instructions.setCodeLine(codeLines.updateMin);\n        min = j;\n      }\n    }\n\n    if (min !== i) {\n      instructions.pushActionsAndEndStep('array', [{\n        name: 'swap',\n        params: [array[min].key, array[i].key]\n      }, {\n        name: 'resetFocusAll',\n        params: []\n      }, {\n        name: 'unlabelAll',\n        params: []\n      }]);\n      instructions.setCodeLine(codeLines.swap);\n      var tmp = array[i];\n      array[i] = array[min];\n      array[min] = tmp;\n    }\n  }\n\n  instructions.pushActionsAndEndStep('array', [{\n    name: 'resetAll',\n    params: []\n  }]);\n  return instructions.get();\n};\n\nvar bubbleSortInstruction = function bubbleSortInstruction(data, _params) {\n  var instructions = new Instructions();\n  instructions.setDuration(750);\n  var array = initArray(data);\n  var codeLines = getCodeLine('bubbleSort'); // Start make instruction\n\n  var len = array.length;\n  var i, j, stop;\n  instructions.setCodeLine(codeLines.init);\n\n  for (i = 0; i < len; i++) {\n    instructions.setCodeLine(codeLines.iteration);\n\n    for (j = 0, stop = len - i - 1; j < stop; j++) {\n      instructions.pushActionsAndEndStep('array', [{\n        name: 'resetFocusAll',\n        params: []\n      }, {\n        name: 'focus',\n        params: [array[j].key]\n      }, {\n        name: 'focus',\n        params: [array[j + 1].key]\n      }]);\n      instructions.setCodeLine(codeLines.compare);\n\n      if (array[j].val > array[j + 1].val) {\n        instructions.pushActionsAndEndStep('array', [{\n          name: 'swap',\n          params: [array[j].key, array[j + 1].key]\n        }]);\n        instructions.setCodeLine(codeLines.swap);\n        var temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n      }\n\n      instructions.setCodeLine(codeLines.step);\n\n      if (j + 1 === stop) {\n        instructions.pushActionsAndEndStep('array', [{\n          name: 'setUnsortedLine',\n          params: [array[j + 1].key]\n        }]);\n      }\n    }\n  }\n\n  instructions.pushActionsAndEndStep('array', [{\n    name: 'resetAll',\n    params: []\n  }]);\n  return instructions.get();\n};\n\nvar insertionSortInstruction = function insertionSortInstruction(data, _params) {\n  var instructions = new Instructions();\n  instructions.setDuration(750);\n  var array = initArray(data); // const codeLines = getCodeLine('insertionSort');\n\n  var swapArrayNodes = function swapArrayNodes(indexA, indexB) {\n    var tmp = array[indexA];\n    array[indexA] = array[indexB];\n    array[indexB] = tmp;\n  }; // Start make instruction\n\n\n  var len = array.length;\n  var i, j, keyValue;\n\n  for (i = 1; i < len; i++) {\n    instructions.pushActionsAndEndStep('array', [{\n      name: 'focus',\n      params: [array[i].key]\n    }, {\n      name: 'setUnsortedLine',\n      params: [array[i - 1].key]\n    }]);\n    instructions.pushActionsAndEndStep('array', [{\n      name: 'resetFocus',\n      params: [array[i].key]\n    }, {\n      name: 'setCurrentInsertionSortNode',\n      params: [array[i].key]\n    }]);\n    keyValue = array[i].val;\n    j = i - 1;\n    /* Move elements of arr[0..i-1], that are \n          greater than key, to one position ahead \n          of their current position */\n\n    for (j = i - 1; j >= 0 && array[j].val > keyValue; j--) {\n      instructions.pushActionsAndEndStep('array', [{\n        name: 'setIndex',\n        params: [array[j].key, j + 1]\n      }]);\n      swapArrayNodes(j, j + 1);\n    }\n\n    instructions.pushActionsAndEndStep('array', [{\n      name: 'setIndex',\n      params: [array[j + 1].key, j + 1]\n    }, {\n      name: 'setValue',\n      params: [array[j + 1].key, keyValue]\n    }, {\n      name: 'unsetCurrentInsertionSortNode',\n      params: []\n    }]);\n    array[j + 1].val = keyValue;\n  }\n\n  instructions.pushActionsAndEndStep('array', [{\n    name: 'resetAll',\n    params: []\n  }]);\n  return instructions.get();\n};\n\nvar getCodeLine = function getCodeLine(operation) {\n  switch (operation) {\n    case 'bubbleSort':\n      return {\n        init: '12-18',\n        compare: '14',\n        swap: '15',\n        iteration: '12',\n        step: '13'\n      };\n\n    case 'selectionSort':\n      return {\n        init: '1',\n        swap: '10-14',\n        iteration: '3',\n        findMin: '5',\n        updateMin: '6-7',\n        compare: '6'\n      };\n\n    case 'insertionSort':\n      return {\n        init: '1',\n        swap: '10-14',\n        iteration: '3',\n        findMin: '5',\n        updateMin: '6-7',\n        compare: '6'\n      };\n\n    default:\n      return {};\n  }\n};","map":null,"metadata":{},"sourceType":"module"}