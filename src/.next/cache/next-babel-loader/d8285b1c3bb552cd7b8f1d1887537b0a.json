{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst DEFAULT_DURATION = 1500;\nexport class Instructions {\n  constructor() {\n    _defineProperty(this, \"instructions\", void 0);\n\n    this.instructions = [];\n  }\n\n  push(instruction) {\n    const newInstruction = Object.assign({\n      duration: DEFAULT_DURATION\n    }, instruction);\n    this.instructions.push(newInstruction);\n  }\n\n  get() {\n    return this.instructions;\n  }\n\n}\nexport class LinkedListNode {\n  constructor(val, key) {\n    _defineProperty(this, \"val\", void 0);\n\n    _defineProperty(this, \"next\", void 0);\n\n    _defineProperty(this, \"key\", void 0);\n\n    this.val = val;\n    this.next = null;\n    this.key = key;\n  }\n\n}\nexport const initLinkedList = array => {\n  let head;\n  let current;\n\n  for (let i = 0; i < array.length; i++) {\n    const newNode = new LinkedListNode(array[i], i);\n\n    if (current) {\n      current.next = newNode;\n      current = current.next;\n    } else {\n      // first node\n      head = newNode;\n      current = head;\n    }\n  } //@ts-ignore\n\n\n  return head;\n};\nexport const convertLinkedListToArray = linkedList => {\n  let result = [];\n  let current = linkedList;\n\n  while (current) {\n    result.push(current.val);\n    current = current.next;\n  }\n\n  return result;\n};","map":null,"metadata":{},"sourceType":"module"}