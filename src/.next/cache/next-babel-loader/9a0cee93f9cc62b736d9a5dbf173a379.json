{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { PointerLink } from 'components';\nimport { HASH_TABLE_KEYS_HEIGHT, HASH_TABLE_KEYS_WIDTH, HASH_TABLE_HASH_FUNC_X, HASH_TABLE_ARRAY_X, ARRAY_BLOCK_HEIGHT, HASH_TABLE_FUNC_WIDTH } from \"../../constants\";\nexport class HashIndicationArrow extends Component {\n  renderArrowIndicateHashForKey() {\n    const {\n      hashTableModel,\n      onAnimationEnd\n    } = this.props;\n    const keyToHighlight = this.getKeysToHighlight();\n    return [...hashTableModel.keys].sort(({\n      key: keyA\n    }, {\n      key: keyB\n    }) => {\n      // We sort so the key which are about to be deleted will be paint later\n      // so the highlight arrow will be easier to see\n      const pointA = keyToHighlight.includes(keyA) ? 1 : 0;\n      const pointB = keyToHighlight.includes(keyB) ? 1 : 0;\n      return pointA - pointB;\n    }).map(({\n      key,\n      isNew,\n      address\n    }) => {\n      const memoryLocationYCoordinate = (address + 0.5) * ARRAY_BLOCK_HEIGHT;\n      const index = this.getKeysIndex(key); // The path can be divided into three part\n      // 1 - Move to hash funtion\n      // 2 - Move inside hash function\n      // 3 - Reach memory block\n\n      const moveToHashFunction = `M ${HASH_TABLE_KEYS_WIDTH} ${(index + 0.5) * HASH_TABLE_KEYS_HEIGHT + index * 10} H ${HASH_TABLE_HASH_FUNC_X}`;\n      const moveInsideHashFunction = `L ${HASH_TABLE_HASH_FUNC_X + HASH_TABLE_FUNC_WIDTH} ${memoryLocationYCoordinate}`;\n      const reachMemoryBlock = `H ${HASH_TABLE_ARRAY_X - 50}`;\n      const path = [moveToHashFunction, moveInsideHashFunction, reachMemoryBlock].join(' ');\n      const shouldHighlight = keyToHighlight.includes(key);\n      const shouldBlur = keyToHighlight.length ? !shouldHighlight : false;\n      return __jsx(PointerLink, {\n        path: path,\n        key: key,\n        arrowDirection: \"right\",\n        isNew: !!isNew,\n        animationDuration: \"2s\",\n        onAnimationEnd: animationName => onAnimationEnd(key, animationName),\n        highlight: shouldHighlight,\n        blur: shouldBlur\n      });\n    });\n  }\n\n  getKeysToHighlight() {\n    const {\n      hashTableModel\n    } = this.props;\n    return hashTableModel.keys.filter(({\n      highlight\n    }) => highlight).map(({\n      key\n    }) => key);\n  }\n\n  getKeysIndex(key) {\n    const {\n      hashTableModel\n    } = this.props;\n    return hashTableModel.keys.findIndex(({\n      key: itemKey\n    }) => key === itemKey);\n  }\n\n  render() {\n    return this.renderArrowIndicateHashForKey();\n  }\n\n}\nexport default HashIndicationArrow;","map":null,"metadata":{},"sourceType":"module"}