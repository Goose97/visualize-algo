{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { LeftOutlined, RightOutlined } from '@ant-design/icons';\nimport { CodeBlock, ExplanationBlock, ProgressControl } from \"../../components\";\nimport { promiseSetState, compactObject, classNameHelper, performAnimation, AnimationTaskQueue } from 'utils';\nimport { DEFAULT_WAIT, DEFAULT_SIDEBAR_WIDTH, SIDEBAR_COLLAPSE_WIDTH } from \"../../constants\";\nexport var VisualAlgo = /*#__PURE__*/function (_Component) {\n  _inherits(VisualAlgo, _Component);\n\n  var _super = _createSuper(VisualAlgo);\n\n  function VisualAlgo(props) {\n    var _this;\n\n    _classCallCheck(this, VisualAlgo);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"nextStepTimeoutToken\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"mouseStart\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"startWidth\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"widthBeforeCollapse\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"codeAndExplanationRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"animationQueue\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"sideBarWidth\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidUpdate\", function _callee(_prevProps, prevState) {\n      var _this$state, currentStep, autoPlay;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$state = _this.state, currentStep = _this$state.currentStep, autoPlay = _this$state.autoPlay; // currentStep === -1 means we are resetting for a new instruction sequence\n\n              if (currentStep !== prevState.currentStep && currentStep !== -1) {\n                _this.handleStepChange(currentStep);\n              }\n\n              if (autoPlay !== prevState.autoPlay) {\n                _this.handleAutoPlayChange(autoPlay);\n              }\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, _Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"increaseCurrentStep\", function () {\n      var currentStep = _this.state.currentStep;\n\n      _this.setState({\n        currentStep: currentStep + 1\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"decreaseCurrentStep\", function () {\n      var currentStep = _this.state.currentStep;\n\n      _this.setState({\n        currentStep: currentStep - 1\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"goToFinalStep\", function () {\n      var stepDescription = _this.props.stepDescription;\n      var finalStep = stepDescription.length - 1;\n\n      _this.setState({\n        currentStep: finalStep\n      });\n\n      _this.handleTogglePlay(false);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"goToFirstStep\", function () {\n      _this.setState({\n        currentStep: 0\n      });\n\n      _this.handleTogglePlay(false);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStartResize\", function (e) {\n      _this.saveMouseStartPoint(e);\n\n      _this.saveWidthWhenStart(e);\n\n      _this.startTrackingMouseMove();\n\n      _this.setState({\n        isCollapsing: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"trackingMouseCallback\", function (e) {\n      // Prevent dragging to select text\n      e.preventDefault();\n      if (!_this.mouseStart || !_this.startWidth) return;\n      var deltaX = e.clientX - _this.mouseStart.x;\n\n      _this.animationQueue.enqueue(_this.startWidth - deltaX);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateSidebarWidth\", function (newWidth) {\n      var onSideBarWidthChange = _this.props.onSideBarWidthChange;\n      var sideBarDiv = _this.codeAndExplanationRef.current;\n\n      if (sideBarDiv) {\n        sideBarDiv.style.width = \"\".concat(newWidth, \"px\");\n        _this.sideBarWidth = newWidth;\n        onSideBarWidthChange && onSideBarWidthChange(newWidth);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stopTrackingMouseMove\", function () {\n      document.removeEventListener('mousemove', _this.trackingMouseCallback);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCollapse\", function () {\n      var isCollapsing = _this.state.isCollapsing;\n      if (!isCollapsing) _this.widthBeforeCollapse = _this.sideBarWidth;\n      performAnimation({\n        startValue: _this.sideBarWidth,\n        endValue: isCollapsing ? _this.widthBeforeCollapse : SIDEBAR_COLLAPSE_WIDTH,\n        duration: 300,\n        callback: _this.updateSidebarWidth\n      });\n\n      _this.setState({\n        isCollapsing: !isCollapsing\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePlay\", _this.handleTogglePlay.bind(_assertThisInitialized(_this), true));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStop\", _this.handleTogglePlay.bind(_assertThisInitialized(_this), false));\n\n    _this.state = {\n      currentStep: -1,\n      autoPlay: false,\n      isCollapsing: false\n    };\n    _this.codeAndExplanationRef = React.createRef();\n    _this.animationQueue = new AnimationTaskQueue({\n      callback: _this.updateSidebarWidth\n    });\n    _this.sideBarWidth = DEFAULT_SIDEBAR_WIDTH;\n    return _this;\n  }\n\n  _createClass(VisualAlgo, [{\n    key: \"handleAutoPlayChange\",\n    value: function handleAutoPlayChange(newAutoPlayState) {\n      if (newAutoPlayState) this.increaseCurrentStep();else this.cancelNextStepConsumation();\n    }\n  }, {\n    key: \"handleStepChange\",\n    value: function handleStepChange(newStep) {\n      var _this2 = this;\n\n      var autoPlay = this.state.autoPlay;\n      var _this$props = this.props,\n          stepDescription = _this$props.stepDescription,\n          onStepChange = _this$props.onStepChange;\n      if (newStep >= stepDescription.length) return;\n      var _stepDescription$newS = stepDescription[newStep],\n          codeLine = _stepDescription$newS.codeLine,\n          explanationStep = _stepDescription$newS.explanationStep,\n          duration = _stepDescription$newS.duration;\n      var newState = compactObject({\n        codeLine: codeLine,\n        explanationStep: explanationStep\n      }); //@ts-ignore\n\n      this.setState(newState, function () {\n        if (autoPlay) {\n          _this2.caculateProgress() !== 100 ? _this2.scheduleNextStepConsumation(duration) : _this2.handleTogglePlay(false);\n        }\n      });\n      onStepChange && onStepChange(newStep);\n    }\n  }, {\n    key: \"scheduleNextStepConsumation\",\n    value: function scheduleNextStepConsumation(wait) {\n      this.nextStepTimeoutToken = setTimeout(this.increaseCurrentStep, wait || DEFAULT_WAIT);\n    }\n  }, {\n    key: \"handleTogglePlay\",\n    value: function handleTogglePlay(isPlaying) {\n      var onPlayingChange = this.props.onPlayingChange; // Nếu được component cha kiểm soát thì không lưu vào state mà gọi lên\n      // handler do cha truyền xuống\n\n      if ('autoPlay' in this.props) {\n        onPlayingChange && onPlayingChange(isPlaying);\n      } else {\n        this.setState({\n          autoPlay: isPlaying\n        });\n      }\n    }\n  }, {\n    key: \"resetForNewApi\",\n    value: function resetForNewApi() {\n      this.cancelNextStepConsumation();\n      return promiseSetState.call(this, {\n        currentStep: -1\n      });\n    }\n  }, {\n    key: \"cancelNextStepConsumation\",\n    value: function cancelNextStepConsumation() {\n      this.nextStepTimeoutToken && window.clearTimeout(this.nextStepTimeoutToken);\n    }\n  }, {\n    key: \"caculateProgress\",\n    value: function caculateProgress() {\n      var currentStep = this.state.currentStep;\n      var stepDescription = this.props.stepDescription;\n      if (!stepDescription.length) return 0;\n      var total = stepDescription.length - 1;\n      return currentStep * 100 / total;\n    }\n  }, {\n    key: \"saveMouseStartPoint\",\n    value: function saveMouseStartPoint(e) {\n      this.mouseStart = {\n        x: e.clientX,\n        y: e.clientY\n      };\n    }\n  }, {\n    key: \"saveWidthWhenStart\",\n    value: function saveWidthWhenStart(e) {\n      var wrapperDiv = e.currentTarget.parentNode;\n\n      if (wrapperDiv) {\n        this.startWidth = wrapperDiv.getBoundingClientRect().width;\n      }\n    }\n  }, {\n    key: \"startTrackingMouseMove\",\n    value: function startTrackingMouseMove() {\n      document.addEventListener('mousemove', this.trackingMouseCallback);\n      document.addEventListener('mouseup', this.stopTrackingMouseMove);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          code = _this$props2.code,\n          explanation = _this$props2.explanation,\n          disableProgressControl = _this$props2.disableProgressControl;\n      var _this$state2 = this.state,\n          codeLine = _this$state2.codeLine,\n          explanationStep = _this$state2.explanationStep,\n          autoPlay = _this$state2.autoPlay,\n          isCollapsing = _this$state2.isCollapsing;\n\n      var visualizationScreen = __jsx(\"div\", {\n        className: \"fx-3 fx-col visual-container shadow\"\n      }, __jsx(\"div\", {\n        className: \"fx fx-between px-8 py-2\"\n      }, __jsx(ProgressControl, {\n        onForward: this.increaseCurrentStep,\n        onFastForward: this.goToFinalStep,\n        onBackward: this.decreaseCurrentStep,\n        onFastBackward: this.goToFirstStep,\n        onPlay: this.handlePlay,\n        onStop: this.handleStop,\n        autoPlay: autoPlay,\n        progress: this.caculateProgress(),\n        disabled: disableProgressControl\n      })), __jsx(\"div\", {\n        className: \"fx-1\"\n      }, children));\n\n      var className = classNameHelper({\n        base: 'fx-col fx-2 code-and-explanation'\n      });\n\n      var codeAndExplanation = __jsx(\"div\", {\n        className: className,\n        style: {\n          width: this.sideBarWidth\n        },\n        ref: this.codeAndExplanationRef\n      }, __jsx(\"div\", {\n        className: \"code-and-explanation__drag-handler\",\n        onMouseDown: this.handleStartResize\n      }), __jsx(\"div\", {\n        className: \"code-and-explanation__collapse-button\",\n        onClick: this.handleCollapse\n      }, isCollapsing ? __jsx(LeftOutlined, null) : __jsx(RightOutlined, null)), __jsx(\"div\", {\n        className: \"fx-3 code-container\"\n      }, __jsx(CodeBlock, {\n        code: code,\n        highlightLine: codeLine\n      })), __jsx(\"div\", {\n        className: \"fx-2\"\n      }, __jsx(ExplanationBlock, {\n        explanation: explanation,\n        currentStep: explanationStep\n      })));\n\n      return __jsx(\"div\", {\n        className: \"fx-col vh-100\"\n      }, visualizationScreen, codeAndExplanation);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if ('autoPlay' in props && props.autoPlay !== state.autoPlay) {\n        return {\n          autoPlay: props.autoPlay\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return VisualAlgo;\n}(Component);\nexport default VisualAlgo;","map":null,"metadata":{},"sourceType":"module"}