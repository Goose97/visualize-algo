{"ast":null,"code":"import _Tooltip from \"antd/lib/tooltip\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { QuestionCircleTwoTone } from '@ant-design/icons';\nimport { HTMLRenderer, DropdownWithParamsInput } from 'components';\nimport { getCanvasScaleFactor } from 'utils';\nconst options = [{\n  label: 'Insert',\n  value: 'insert'\n}, {\n  label: 'Delete',\n  value: 'delete'\n}];\nconst requiredParams = {\n  insert: {\n    key: 'string',\n    value: 'number'\n  },\n  delete: {\n    key: 'string'\n  }\n};\n\nconst hashFunctionTooltip = __jsx(\"span\", null, \"We use a simple version of hash function:\", ' ', __jsx(\"em\", null, \"f(key) = (sum of letters charcode) mod 10\"));\n\nexport class HashTableHTML {\n  static renderToView(params) {\n    const {\n      wrapperElement\n    } = params;\n\n    if (wrapperElement) {\n      const {\n        wrapperElement,\n        coordinate,\n        apiHandler,\n        disabled\n      } = params;\n      const memoryBlocks = wrapperElement.querySelector('.hash-table__memory-blocks');\n      if (!memoryBlocks) return;\n      const scaledFactor = getCanvasScaleFactor();\n      const {\n        height,\n        left: wrapperLeft\n      } = wrapperElement.getBoundingClientRect();\n      const {\n        left\n      } = memoryBlocks.getBoundingClientRect();\n      const width = left + 100 - wrapperLeft;\n\n      const elementToRender = __jsx(\"div\", {\n        style: {\n          width,\n          height\n        },\n        className: \"hash-table-html__wrapper relative\"\n      }, __jsx(DropdownWithParamsInput, {\n        options: options,\n        requiredApiParams: requiredParams,\n        handler: apiHandler,\n        disabled: disabled\n      }), __jsx(_Tooltip, {\n        title: hashFunctionTooltip\n      }, __jsx(QuestionCircleTwoTone, {\n        twoToneColor: \"orange\",\n        className: \"absolute\",\n        style: {\n          left: 410 * scaledFactor,\n          top: -30 * scaledFactor\n        }\n      })));\n\n      const scaledCoordinate = {\n        x: coordinate.x * scaledFactor,\n        y: coordinate.y * scaledFactor\n      };\n      HTMLRenderer.inject(elementToRender, scaledCoordinate, `hash-table-html__wrapper`);\n    }\n  }\n\n}\nexport default HashTableHTML;","map":null,"metadata":{},"sourceType":"module"}