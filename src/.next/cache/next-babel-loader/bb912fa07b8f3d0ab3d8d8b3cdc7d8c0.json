{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button, Input } from 'components';\nimport withExtendClassName from 'hocs/withExtendClassName';\nimport { classNameHelper } from 'utils';\nexport class InitArrayInput extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"inputRef\", void 0);\n\n    _defineProperty(this, \"handleChange\", value => {\n      const {\n        value: arrayValue,\n        error\n      } = this.getArrayRepresentationFromInputText(value.toString());\n      this.setState({\n        input: arrayValue,\n        error\n      });\n    });\n\n    _defineProperty(this, \"focusToInput\", () => {\n      const inputElement = this.inputRef.current;\n      const htmlInput = ReactDOM.findDOMNode(inputElement);\n      htmlInput === null || htmlInput === void 0 ? void 0 : htmlInput.focus();\n    });\n\n    _defineProperty(this, \"handleClick\", () => {\n      const {\n        onSubmit\n      } = this.props;\n      const {\n        isTyping,\n        input\n      } = this.state;\n\n      if (!isTyping) {\n        this.setState({\n          isTyping: true\n        }, this.focusToInput);\n      } else {\n        const linkedListData = input === undefined || !input.length ? this.generateRandomData() : input;\n        onSubmit(linkedListData);\n      }\n    });\n\n    this.state = {\n      input: [],\n      error: null,\n      isTyping: false\n    };\n    this.inputRef = React.createRef();\n  }\n\n  getArrayRepresentationFromInputText(inputText) {\n    const regex = /^\\[([\\d,\\s]+)\\]$/;\n    const match = inputText.match(regex);\n    if (!match) return {\n      value: [],\n      error: 'Sai cú pháp'\n    };\n    return {\n      value: match[1].split(',').map(string => parseInt(string)).filter(item => !!item),\n      error: null\n    };\n  }\n\n  produceClassName() {\n    const {\n      isTyping\n    } = this.state;\n    return classNameHelper({\n      base: 'init-linked-list-button__wrapper',\n      typing: isTyping\n    });\n  }\n\n  generateRandomData() {\n    const {\n      defaultLength\n    } = this.props;\n    const length = defaultLength || 8;\n    return Array(length).fill(0).map(() => Math.round(Math.random() * 20));\n  }\n\n  render() {\n    const {\n      isTyping\n    } = this.state;\n    const {\n      className,\n      text\n    } = this.props;\n    return __jsx(\"div\", {\n      className: this.produceClassName()\n    }, __jsx(Button, {\n      type: \"primary\",\n      className: className,\n      onClick: this.handleClick\n    }, isTyping ? 'Initialize' : text, __jsx(Input, {\n      ref: this.inputRef,\n      onChange: this.handleChange,\n      onClick: e => e.stopPropagation(),\n      placeholder: \"[5,2,3,7,4]\"\n    })));\n  }\n\n}\nexport default withExtendClassName('f-big-2 px-6 py-2')(InitArrayInput);","map":null,"metadata":{},"sourceType":"module"}