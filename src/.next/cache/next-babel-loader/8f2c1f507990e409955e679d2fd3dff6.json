{"ast":null,"code":"import _Radio from \"antd/lib/radio\";\nimport _Input from \"antd/lib/input\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button, CustomModal } from 'components';\nimport withExtendClassName from 'hocs/withExtendClassName';\nconst {\n  TextArea\n} = _Input;\nconst defaultObject = {\n  a: 1,\n  b: 2,\n  gh: 23\n};\nconst defaultInputText = JSON.stringify(defaultObject);\nexport class InitHashTableInput extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"inputRef\", void 0);\n\n    _defineProperty(this, \"handleChange\", e => {\n      this.setState({\n        textInput: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"focusToInput\", () => {\n      const inputElement = this.inputRef.current;\n      const htmlInput = ReactDOM.findDOMNode(inputElement);\n      htmlInput === null || htmlInput === void 0 ? void 0 : htmlInput.focus();\n    });\n\n    _defineProperty(this, \"handleSubmit\", () => {\n      const {\n        onSubmit\n      } = this.props;\n      const {\n        textInput,\n        collisionResolution\n      } = this.state;\n      const textInputToParse = textInput || defaultInputText;\n      const hashTableObject = JSON.parse(textInputToParse);\n      onSubmit(hashTableObject, collisionResolution);\n    });\n\n    _defineProperty(this, \"isOkButtonDisable\", () => {\n      const {\n        textInput\n      } = this.state;\n      if (textInput == undefined || textInput == '') return false; // Disable ok button if JSON input is malformed\n\n      try {\n        const parsedData = JSON.parse(textInput);\n        return typeof parsedData !== 'object' || parsedData === null;\n      } catch (e) {\n        return true;\n      }\n    });\n\n    this.state = {\n      input: defaultObject,\n      error: null,\n      isModalVisible: false,\n      collisionResolution: 'chaining'\n    };\n    this.inputRef = React.createRef();\n  }\n\n  render() {\n    const {\n      isModalVisible,\n      textInput,\n      collisionResolution\n    } = this.state;\n    const {\n      className\n    } = this.props;\n\n    const inputTextArea = __jsx(\"div\", {\n      className: \"init-hash-table-modal__input fx-3\"\n    }, __jsx(\"span\", null, \"Paste JSON here:\"), __jsx(TextArea, {\n      onChange: this.handleChange,\n      placeholder: defaultInputText,\n      value: textInput\n    }));\n\n    const collisionResolutionPicker = __jsx(\"div\", {\n      className: \"mt-2\"\n    }, __jsx(\"span\", null, \"Collision resolution method:\\xA0\"), __jsx(_Radio.Group, {\n      value: collisionResolution,\n      onChange: e => this.setState({\n        collisionResolution: e.target.value\n      })\n    }, __jsx(_Radio, {\n      value: \"chaining\"\n    }, \"Chaining\"), __jsx(_Radio, {\n      value: \"linearProbe\"\n    }, \"Linear probe\")));\n\n    return __jsx(Button, {\n      type: \"primary\",\n      className: className,\n      onClick: () => this.setState({\n        isModalVisible: true\n      })\n    }, \"Create new hash table\", __jsx(CustomModal, {\n      visible: isModalVisible,\n      title: \"Construct new hash table\",\n      onCancel: () => this.setState({\n        isModalVisible: false\n      }),\n      onOk: this.handleSubmit,\n      okButtonProps: {\n        disabled: this.isOkButtonDisable()\n      },\n      width: 550\n    }, __jsx(\"div\", {\n      className: \"fx-col\"\n    }, inputTextArea, collisionResolutionPicker)));\n  }\n\n}\nexport default withExtendClassName('f-big-2 px-6 py-2')(InitHashTableInput);","map":null,"metadata":{},"sourceType":"module"}