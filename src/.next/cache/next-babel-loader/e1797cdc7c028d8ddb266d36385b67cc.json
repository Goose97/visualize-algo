{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { LeftOutlined, RightOutlined } from '@ant-design/icons';\nimport { CodeBlock, ExplanationBlock, ProgressControl } from \"../../components\";\nimport { promiseSetState, compactObject, classNameHelper, performAnimation, AnimationTaskQueue } from 'utils';\nimport { DEFAULT_WAIT, DEFAULT_SIDEBAR_WIDTH, SIDEBAR_COLLAPSE_WIDTH } from \"../../constants\";\nexport class VisualAlgo extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"nextStepTimeoutToken\", void 0);\n\n    _defineProperty(this, \"mouseStart\", void 0);\n\n    _defineProperty(this, \"startWidth\", void 0);\n\n    _defineProperty(this, \"widthBeforeCollapse\", void 0);\n\n    _defineProperty(this, \"codeAndExplanationRef\", void 0);\n\n    _defineProperty(this, \"animationQueue\", void 0);\n\n    _defineProperty(this, \"sideBarWidth\", void 0);\n\n    _defineProperty(this, \"componentDidUpdate\", async (_prevProps, prevState) => {\n      const {\n        currentStep,\n        autoPlay\n      } = this.state; // currentStep === -1 means we are resetting for a new instruction sequence\n\n      if (currentStep !== prevState.currentStep && currentStep !== -1) {\n        this.handleStepChange(currentStep);\n      }\n\n      if (autoPlay !== prevState.autoPlay) {\n        this.handleAutoPlayChange(autoPlay);\n      }\n    });\n\n    _defineProperty(this, \"increaseCurrentStep\", () => {\n      const {\n        currentStep\n      } = this.state;\n      this.setState({\n        currentStep: currentStep + 1\n      });\n    });\n\n    _defineProperty(this, \"decreaseCurrentStep\", () => {\n      const {\n        currentStep\n      } = this.state;\n      this.setState({\n        currentStep: currentStep - 1\n      });\n    });\n\n    _defineProperty(this, \"goToFinalStep\", () => {\n      const {\n        stepDescription\n      } = this.props;\n      const finalStep = stepDescription.length - 1;\n      this.setState({\n        currentStep: finalStep\n      });\n      this.handleTogglePlay(false);\n    });\n\n    _defineProperty(this, \"goToFirstStep\", () => {\n      this.setState({\n        currentStep: 0\n      });\n      this.handleTogglePlay(false);\n    });\n\n    _defineProperty(this, \"handleStartResize\", e => {\n      this.saveMouseStartPoint(e);\n      this.saveWidthWhenStart(e);\n      this.startTrackingMouseMove();\n      this.setState({\n        isCollapsing: false\n      });\n    });\n\n    _defineProperty(this, \"trackingMouseCallback\", e => {\n      // Prevent dragging to select text\n      e.preventDefault();\n      if (!this.mouseStart || !this.startWidth) return;\n      const deltaX = e.clientX - this.mouseStart.x;\n      this.animationQueue.enqueue(this.startWidth - deltaX);\n    });\n\n    _defineProperty(this, \"updateSidebarWidth\", newWidth => {\n      const {\n        onSideBarWidthChange\n      } = this.props;\n      const sideBarDiv = this.codeAndExplanationRef.current;\n\n      if (sideBarDiv) {\n        sideBarDiv.style.width = `${newWidth}px`;\n        this.sideBarWidth = newWidth;\n        onSideBarWidthChange && onSideBarWidthChange(newWidth);\n      }\n    });\n\n    _defineProperty(this, \"stopTrackingMouseMove\", () => {\n      document.removeEventListener('mousemove', this.trackingMouseCallback);\n    });\n\n    _defineProperty(this, \"handleCollapse\", () => {\n      const {\n        isCollapsing\n      } = this.state;\n      if (!isCollapsing) this.widthBeforeCollapse = this.sideBarWidth;\n      performAnimation({\n        startValue: this.sideBarWidth,\n        endValue: isCollapsing ? this.widthBeforeCollapse : SIDEBAR_COLLAPSE_WIDTH,\n        duration: 300,\n        callback: this.updateSidebarWidth\n      });\n      this.setState({\n        isCollapsing: !isCollapsing\n      });\n    });\n\n    _defineProperty(this, \"handlePlay\", this.handleTogglePlay.bind(this, true));\n\n    _defineProperty(this, \"handleStop\", this.handleTogglePlay.bind(this, false));\n\n    this.state = {\n      currentStep: -1,\n      autoPlay: false,\n      isCollapsing: false\n    };\n    this.codeAndExplanationRef = React.createRef();\n    this.animationQueue = new AnimationTaskQueue({\n      callback: this.updateSidebarWidth\n    });\n    this.sideBarWidth = DEFAULT_SIDEBAR_WIDTH;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if ('autoPlay' in props && props.autoPlay !== state.autoPlay) {\n      return {\n        autoPlay: props.autoPlay\n      };\n    }\n\n    return null;\n  }\n\n  handleAutoPlayChange(newAutoPlayState) {\n    if (newAutoPlayState) this.increaseCurrentStep();else this.cancelNextStepConsumation();\n  }\n\n  handleStepChange(newStep) {\n    const {\n      autoPlay\n    } = this.state;\n    const {\n      stepDescription,\n      onStepChange\n    } = this.props;\n    if (newStep >= stepDescription.length) return;\n    const {\n      codeLine,\n      explanationStep,\n      duration\n    } = stepDescription[newStep];\n    const newState = compactObject({\n      codeLine,\n      explanationStep\n    }); //@ts-ignore\n\n    this.setState(newState, () => {\n      if (autoPlay) {\n        this.caculateProgress() !== 100 ? this.scheduleNextStepConsumation(duration) : this.handleTogglePlay(false);\n      }\n    });\n    onStepChange && onStepChange(newStep);\n  }\n\n  scheduleNextStepConsumation(wait) {\n    this.nextStepTimeoutToken = setTimeout(this.increaseCurrentStep, wait || DEFAULT_WAIT);\n  }\n\n  handleTogglePlay(isPlaying) {\n    const {\n      onPlayingChange\n    } = this.props; // Nếu được component cha kiểm soát thì không lưu vào state mà gọi lên\n    // handler do cha truyền xuống\n\n    if ('autoPlay' in this.props) {\n      onPlayingChange && onPlayingChange(isPlaying);\n    } else {\n      this.setState({\n        autoPlay: isPlaying\n      });\n    }\n  }\n\n  resetForNewApi() {\n    this.cancelNextStepConsumation();\n    return promiseSetState.call(this, {\n      currentStep: -1\n    });\n  }\n\n  cancelNextStepConsumation() {\n    this.nextStepTimeoutToken && window.clearTimeout(this.nextStepTimeoutToken);\n  }\n\n  caculateProgress() {\n    const {\n      currentStep\n    } = this.state;\n    const {\n      stepDescription\n    } = this.props;\n    if (!stepDescription.length) return 0;\n    const total = stepDescription.length - 1;\n    return currentStep * 100 / total;\n  }\n\n  saveMouseStartPoint(e) {\n    this.mouseStart = {\n      x: e.clientX,\n      y: e.clientY\n    };\n  }\n\n  saveWidthWhenStart(e) {\n    const wrapperDiv = e.currentTarget.parentNode;\n\n    if (wrapperDiv) {\n      this.startWidth = wrapperDiv.getBoundingClientRect().width;\n    }\n  }\n\n  startTrackingMouseMove() {\n    document.addEventListener('mousemove', this.trackingMouseCallback);\n    document.addEventListener('mouseup', this.stopTrackingMouseMove);\n  }\n\n  render() {\n    const {\n      children,\n      code,\n      explanation,\n      disableProgressControl\n    } = this.props;\n    const {\n      codeLine,\n      explanationStep,\n      autoPlay,\n      isCollapsing\n    } = this.state;\n\n    const visualizationScreen = __jsx(\"div\", {\n      className: \"fx-3 fx-col visual-container shadow\"\n    }, __jsx(\"div\", {\n      className: \"fx fx-between px-8 py-2\"\n    }, __jsx(ProgressControl, {\n      onForward: this.increaseCurrentStep,\n      onFastForward: this.goToFinalStep,\n      onBackward: this.decreaseCurrentStep,\n      onFastBackward: this.goToFirstStep,\n      onPlay: this.handlePlay,\n      onStop: this.handleStop,\n      autoPlay: autoPlay,\n      progress: this.caculateProgress(),\n      disabled: disableProgressControl\n    })), __jsx(\"div\", {\n      className: \"fx-1\"\n    }, children));\n\n    const className = classNameHelper({\n      base: 'fx-col fx-2 code-and-explanation'\n    });\n\n    const codeAndExplanation = __jsx(\"div\", {\n      className: className,\n      style: {\n        width: this.sideBarWidth\n      },\n      ref: this.codeAndExplanationRef\n    }, __jsx(\"div\", {\n      className: \"code-and-explanation__drag-handler\",\n      onMouseDown: this.handleStartResize\n    }), __jsx(\"div\", {\n      className: \"code-and-explanation__collapse-button\",\n      onClick: this.handleCollapse\n    }, isCollapsing ? __jsx(LeftOutlined, null) : __jsx(RightOutlined, null)), __jsx(\"div\", {\n      className: \"fx-3 code-container\"\n    }, __jsx(CodeBlock, {\n      code: code,\n      highlightLine: codeLine\n    })), __jsx(\"div\", {\n      className: \"fx-2\"\n    }, __jsx(ExplanationBlock, {\n      explanation: explanation,\n      currentStep: explanationStep\n    })));\n\n    return __jsx(\"div\", {\n      className: \"fx-col vh-100\"\n    }, visualizationScreen, codeAndExplanation);\n  }\n\n}\nexport default VisualAlgo;","map":null,"metadata":{},"sourceType":"module"}