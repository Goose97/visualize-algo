{"ast":null,"code":"import _Input from \"antd/lib/input\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button, CustomModal, BinarySearchTreeDS } from 'components';\nimport withExtendClassName from 'hocs/withExtendClassName';\nimport { initBSTbySequentiallyInsert } from 'instructions/BST/helper';\nconst {\n  TextArea\n} = _Input;\nconst PRESET_DATA = [4, 1, 8, -3, 2, 6, 9, null, -2];\nexport class InitBSTInput extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"inputRef\", void 0);\n\n    _defineProperty(this, \"handleChange\", e => {\n      const stateChanges = this.getBSTRepresentationFromInputText(e.target.value); //@ts-ignore\n\n      this.setState(_objectSpread({}, stateChanges, {\n        textInput: e.target.value\n      }));\n    });\n\n    _defineProperty(this, \"focusToInput\", () => {\n      const inputElement = this.inputRef.current;\n      const htmlInput = ReactDOM.findDOMNode(inputElement);\n      htmlInput === null || htmlInput === void 0 ? void 0 : htmlInput.focus();\n    });\n\n    _defineProperty(this, \"handleUsingPresetData\", () => {\n      let textToMatchThoseData = PRESET_DATA.map(item => item === null ? 'null' : item.toString()).join(', ');\n      textToMatchThoseData = `[${textToMatchThoseData}]`;\n      this.setState({\n        input: PRESET_DATA,\n        textInput: textToMatchThoseData\n      });\n    });\n\n    this.state = {\n      input: [],\n      error: null,\n      isModalVisible: false\n    };\n    this.inputRef = React.createRef();\n  }\n\n  getBSTRepresentationFromInputText(inputText) {\n    const regex = /^\\[([(\\-\\d|\\d),\\s]+)\\]$/;\n    const match = inputText.match(regex);\n    if (!match) return {\n      error: 'Sai cú pháp'\n    };\n    const allItemToInsert = match[1].split(',').map(string => string.includes('null') ? null : parseInt(string)).filter(item => item === null || typeof item === 'number');\n    const input = initBSTbySequentiallyInsert(allItemToInsert).getLayerRepresentation();\n    return {\n      input,\n      error: null\n    };\n  }\n\n  render() {\n    const {\n      isModalVisible,\n      input,\n      textInput,\n      error\n    } = this.state;\n    const {\n      className,\n      onSubmit\n    } = this.props;\n\n    const previewWindow = __jsx(\"div\", {\n      className: \"init-bst-modal__preview fx-7\"\n    }, __jsx(\"svg\", {\n      className: \"h-full w-full\"\n    }, !!input.length && __jsx(BinarySearchTreeDS, {\n      x: 10,\n      y: 50,\n      data: input,\n      controlled: true,\n      instructions: []\n    })));\n\n    const inputTextArea = __jsx(\"div\", {\n      className: \"init-bst-modal__input fx-3 fx-col\"\n    }, __jsx(\"div\", {\n      className: \"fx-col\"\n    }, __jsx(\"span\", {\n      className: \"mb-2\"\n    }, \"Element to construct BST (insert sequentially):\"), __jsx(TextArea, {\n      onChange: this.handleChange,\n      placeholder: \"[4, 1, 8, -3, 2, 6, 9, null, -2]\",\n      value: textInput\n    })), __jsx(Button, {\n      type: \"secondary\",\n      onClick: this.handleUsingPresetData\n    }, \"Generate preset data\"));\n\n    return __jsx(Button, {\n      type: \"primary\",\n      className: className,\n      onClick: () => this.setState({\n        isModalVisible: true\n      })\n    }, \"Create new BST\", __jsx(CustomModal, {\n      visible: isModalVisible,\n      title: \"Construct new BST\",\n      onCancel: () => this.setState({\n        isModalVisible: false\n      }),\n      onOk: () => onSubmit(input),\n      okButtonProps: {\n        disabled: !input || !input.length || !!error\n      }\n    }, __jsx(\"div\", {\n      className: \"init-bst-modal__wrapper fx\"\n    }, previewWindow, inputTextArea)));\n  }\n\n}\nexport default withExtendClassName('f-big-2 px-6 py-2')(InitBSTInput);","map":null,"metadata":{},"sourceType":"module"}