{"ast":null,"code":"import _Popover from \"antd/lib/popover\";\nimport _Row from \"antd/lib/row\";\nimport _Col from \"antd/lib/col\";\nimport _isFunction from \"lodash/isFunction\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Input, Button } from 'components';\nimport { upcaseFirstLetterAndSplit } from 'utils';\nexport class ParameterInputPopover extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleInputChange\", (paramName, value) => {\n      const {\n        currentParametersInput\n      } = this.state;\n\n      const newState = _objectSpread({}, currentParametersInput, {\n        [paramName]: value\n      });\n\n      this.setState({\n        currentParametersInput: newState\n      });\n    });\n\n    _defineProperty(this, \"handleSubmitParameter\", () => {\n      const {\n        onSubmit\n      } = this.props;\n      const {\n        currentParametersInput\n      } = this.state;\n      _isFunction(onSubmit) && onSubmit(currentParametersInput);\n    });\n\n    this.state = {\n      currentParametersInput: {}\n    };\n  }\n\n  renderPopoverContent() {\n    const {\n      parameters\n    } = this.props;\n\n    if (parameters) {\n      const listInputParams = Object.entries(parameters).map(([paramName, _type]) => __jsx(_Row, {\n        key: paramName,\n        className: \"fx-center mb-2\",\n        style: {\n          minWidth: 250\n        }\n      }, __jsx(_Col, {\n        span: 12\n      }, upcaseFirstLetterAndSplit(paramName), \":\"), __jsx(_Col, {\n        span: 12\n      }, __jsx(Input, {\n        onChange: this.handleInputChange.bind(null, paramName)\n      }))));\n\n      const submitButton = __jsx(Button, {\n        type: \"secondary\",\n        className: \"mt-6\",\n        onClick: this.handleSubmitParameter\n      }, \"Start\");\n\n      return __jsx(\"div\", {\n        className: \"fx-col\",\n        style: {\n          justifyContent: 'flex-end'\n        }\n      }, listInputParams, submitButton);\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    return __jsx(_Popover, _extends({\n      trigger: \"click\",\n      placement: \"right\",\n      title: \"Parameters\"\n    }, this.props, {\n      content: this.renderPopoverContent(),\n      className: \"parameter-input-popover\"\n    }), children);\n  }\n\n}\nexport default ParameterInputPopover;","map":null,"metadata":{},"sourceType":"module"}