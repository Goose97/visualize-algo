{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _compose from \"lodash/fp/compose\";\nimport _uniq from \"lodash/uniq\";\nimport produce from 'immer';\n\nvar swapObjectProperty = function swapObjectProperty(objectA, objectB, property) {\n  var tmp = objectA[property];\n  objectA[property] = objectB[property];\n  objectB[property] = tmp;\n}; // Nhận vào trạng thái hiện tại của data structure\n// và operation tương ứng. Trả về trạng thái mới\n\n\nvar transformArrayModel = function transformArrayModel(currentModel, operation, payload) {\n  switch (operation) {\n    case 'swap':\n      {\n        var _payload = _slicedToArray(payload, 2),\n            from = _payload[0],\n            to = _payload[1];\n\n        return produce(currentModel, function (draft) {\n          var fromNode = draft.find(function (_ref) {\n            var key = _ref.key;\n            return key === from;\n          });\n          var toNode = draft.find(function (_ref2) {\n            var key = _ref2.key;\n            return key === to;\n          });\n\n          if (fromNode && toNode) {\n            swapObjectProperty(fromNode, toNode, 'index');\n          }\n        });\n      }\n\n    case 'focus':\n      {\n        var _payload2 = _slicedToArray(payload, 1),\n            keyToFocus = _payload2[0];\n\n        return produce(currentModel, function (draft) {\n          var nodeToFocus = draft.find(function (_ref3) {\n            var key = _ref3.key;\n            return key === keyToFocus;\n          });\n\n          if (nodeToFocus) {\n            nodeToFocus.focus = true;\n          }\n        });\n      }\n\n    case 'resetFocus':\n      {\n        var _payload3 = _slicedToArray(payload, 1),\n            keyToResetFocus = _payload3[0];\n\n        return produce(currentModel, function (draft) {\n          var nodeToResetFocus = draft.find(function (_ref4) {\n            var key = _ref4.key;\n            return key === keyToResetFocus;\n          });\n\n          if (nodeToResetFocus) {\n            nodeToResetFocus.focus = false;\n          }\n        });\n      }\n\n    case 'resetFocusAll':\n      {\n        return produce(currentModel, function (draft) {\n          draft.forEach(function (node) {\n            node.focus = false;\n          });\n        });\n      }\n\n    case 'complete':\n      {\n        var _payload4 = _slicedToArray(payload, 1),\n            keyToComplete = _payload4[0];\n\n        return produce(currentModel, function (draft) {\n          var nodeToComplete = draft.find(function (_ref5) {\n            var key = _ref5.key;\n            return key === keyToComplete;\n          });\n\n          if (nodeToComplete) {\n            nodeToComplete.visited = true;\n          }\n        });\n      }\n\n    case 'label':\n      {\n        var _payload5 = _slicedToArray(payload, 3),\n            nodeKeyToLabel = _payload5[0],\n            label = _payload5[1],\n            removeThisLabelInOtherNode = _payload5[2];\n\n        return produce(currentModel, function (draft) {\n          if (removeThisLabelInOtherNode) {\n            draft.forEach(function (node) {\n              var oldLabel = node.label;\n\n              if (oldLabel) {\n                //@ts-ignore\n                var newLabel = oldLabel.filter(function (item) {\n                  return item !== label;\n                });\n                node.label = newLabel;\n              }\n            });\n          }\n\n          var nodeToLabel = draft.find(function (_ref6) {\n            var key = _ref6.key;\n            return key === nodeKeyToLabel;\n          });\n\n          if (nodeToLabel) {\n            var oldLabel = nodeToLabel.label || []; //@ts-ignore\n\n            nodeToLabel.label = _uniq(oldLabel.concat(label));\n          }\n        });\n      }\n\n    case 'unlabel':\n      {\n        var _payload6 = _slicedToArray(payload, 1),\n            keyToUnlabel = _payload6[0];\n\n        return produce(currentModel, function (draft) {\n          var nodeToUnlabel = draft.find(function (_ref7) {\n            var key = _ref7.key;\n            return key === keyToUnlabel;\n          });\n\n          if (nodeToUnlabel) {\n            nodeToUnlabel.label = undefined;\n          }\n        });\n      }\n\n    case 'unlabelAll':\n      {\n        return produce(currentModel, function (draft) {\n          draft.forEach(function (item) {\n            return item.label = undefined;\n          });\n        });\n      }\n\n    case 'setValue':\n      {\n        var _payload7 = _slicedToArray(payload, 2),\n            keyToSetValue = _payload7[0],\n            value = _payload7[1];\n\n        return produce(currentModel, function (draft) {\n          var nodeToResetValue = draft.find(function (_ref8) {\n            var key = _ref8.key;\n            return key === keyToSetValue;\n          });\n          if (nodeToResetValue) nodeToResetValue.value = value;\n        });\n      }\n\n    case 'setIndex':\n      {\n        var _payload8 = _slicedToArray(payload, 2),\n            keyToSetIndex = _payload8[0],\n            index = _payload8[1];\n\n        return produce(currentModel, function (draft) {\n          var nodeToResetValue = draft.find(function (_ref9) {\n            var key = _ref9.key;\n            return key === keyToSetIndex;\n          });\n          if (nodeToResetValue) nodeToResetValue.index = index;\n        });\n      }\n\n    case 'push':\n      {\n        var _payload9 = _slicedToArray(payload, 1),\n            newArrayNode = _payload9[0];\n\n        return produce(currentModel, function (draft) {\n          draft.push(newArrayNode);\n        });\n      }\n    // Highlight target key and blur every other key\n\n    case 'highlight':\n      {\n        var _payload10 = _slicedToArray(payload, 1),\n            keyToHighlight = _payload10[0];\n\n        return produce(currentModel, function (draft) {\n          var arrayNode = draft.find(function (_ref10) {\n            var key = _ref10.key;\n            return key === keyToHighlight;\n          });\n          if (arrayNode) arrayNode.highlight = true;\n          draft.forEach(function (item) {\n            item.blur = !item.highlight;\n          });\n        });\n      }\n\n    case 'dehighlight':\n      {\n        var _payload11 = _slicedToArray(payload, 1),\n            keyToDehighlight = _payload11[0];\n\n        return produce(currentModel, function (draft) {\n          var arrayNode = draft.find(function (_ref11) {\n            var key = _ref11.key;\n            return key === keyToDehighlight;\n          });\n          if (arrayNode) arrayNode.highlight = false;\n        });\n      }\n\n    case 'dehighlightAll':\n      {\n        return produce(currentModel, function (draft) {\n          draft.forEach(function (item) {\n            item.highlight = false;\n            item.blur = false;\n          });\n        });\n      }\n\n    case 'resetAll':\n      {\n        // Reset focus, visited and label\n        var listTransformation = ['resetFocusAll', 'dehighlightAll', 'unlabelAll'].map(function (method) {\n          return function (model) {\n            return transformArrayModel(model, method, []);\n          };\n        });\n        return _compose(listTransformation)(currentModel);\n      }\n\n    default:\n      return currentModel;\n  }\n};\n\nexport default transformArrayModel;","map":null,"metadata":{},"sourceType":"module"}