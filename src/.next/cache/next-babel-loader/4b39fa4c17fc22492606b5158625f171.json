{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport withExtendClassName from 'hocs/withExtendClassName';\n\nvar AutoTransformGroup = /*#__PURE__*/function (_Component) {\n  _inherits(AutoTransformGroup, _Component);\n\n  var _super = _createSuper(AutoTransformGroup);\n\n  function AutoTransformGroup(props) {\n    var _this;\n\n    _classCallCheck(this, AutoTransformGroup);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"transformQueue\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionEnd\", function () {\n      _this.dequeueTransformQueue();\n    });\n\n    _this.state = {\n      transformSequence: []\n    };\n    _this.transformQueue = [];\n    return _this;\n  }\n\n  _createClass(AutoTransformGroup, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props$origin = this.props.origin,\n          newX = _this$props$origin.x,\n          newY = _this$props$origin.y;\n      var _prevProps$origin = prevProps.origin,\n          oldX = _prevProps$origin.x,\n          oldY = _prevProps$origin.y;\n      var changes = [];\n      if (oldX !== newX) changes.push({\n        amount: newX - oldX,\n        direction: 'horizontal'\n      });\n      if (oldY !== newY) changes.push({\n        amount: newY - oldY,\n        direction: 'vertical'\n      });\n      if (changes.length) this.applyChanges(changes);\n    }\n  }, {\n    key: \"applyChanges\",\n    value: function applyChanges(changes) {\n      var additionTransfromSequence = changes.map(function (_ref) {\n        var direction = _ref.direction,\n            amount = _ref.amount;\n\n        switch (direction) {\n          case 'vertical':\n            return \"translate(0 \".concat(amount, \")\");\n\n          case 'horizontal':\n            return \"translate(\".concat(amount, \" 0)\");\n        }\n      });\n      this.transformQueue = additionTransfromSequence;\n      this.dequeueTransformQueue();\n    }\n  }, {\n    key: \"dequeueTransformQueue\",\n    value: function dequeueTransformQueue() {\n      var transformSequence = this.state.transformSequence;\n      var transformString = this.transformQueue.shift();\n      if (!transformString) return;\n      this.setState({\n        transformSequence: transformSequence.concat(transformString)\n      });\n    }\n  }, {\n    key: \"produceTransformString\",\n    value: function produceTransformString() {\n      var transformSequence = this.state.transformSequence;\n      return transformSequence.join(' ');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className;\n      return __jsx(\"g\", {\n        transform: this.produceTransformString(),\n        className: className,\n        onTransitionEnd: this.handleTransitionEnd\n      }, children);\n    }\n  }]);\n\n  return AutoTransformGroup;\n}(Component);\n\nexport default withExtendClassName('has-transition')(AutoTransformGroup);","map":null,"metadata":{},"sourceType":"module"}