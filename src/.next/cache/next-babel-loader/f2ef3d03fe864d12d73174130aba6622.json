{"ast":null,"code":"import _Menu from \"antd/lib/menu\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { CustomDropDown, ParameterInputPopover } from 'components';\nimport { LINKED_LIST_BLOCK_WIDTH, LINKED_LIST_BLOCK_HEIGHT } from \"../../../constants\";\nimport { classNameHelper } from 'utils';\nconst options = [{\n  label: 'Search',\n  value: 'search'\n}, {\n  label: 'Insert before',\n  value: 'insert'\n}, {\n  label: 'Delete',\n  value: 'delete'\n}];\nexport class LinkedListNodeApiDropdown extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMenuVisible: false\n    };\n  }\n\n  handleSelectApi(api, params) {\n    const {\n      handler\n    } = this.props; // const method = `on${upcaseFirstLetterAndSplit(api)}`;\n    // //@ts-ignore\n    // const handler = this.props[method];\n    // handler && handler(params);\n\n    handler && handler(api, params);\n    this.setState({\n      isMenuVisible: false\n    });\n  }\n\n  produceClassName() {\n    const {\n      isMenuVisible\n    } = this.state;\n    return classNameHelper({\n      base: 'linked-list-html__node-dropdown',\n      ['menu-visible']: !!isMenuVisible\n    });\n  }\n\n  renderMenu() {\n    const {\n      nodeKey\n    } = this.props;\n    return __jsx(_Menu, null, options.map(({\n      label,\n      value: apiName\n    }) => {\n      switch (apiName) {\n        case 'search':\n        case 'delete':\n          return __jsx(_Menu.Item, {\n            onClick: () => this.handleSelectApi(apiName, {\n              key: nodeKey\n            }),\n            key: apiName\n          }, label);\n\n        case 'insert':\n          return __jsx(_Menu.Item, {\n            key: apiName\n          }, __jsx(ParameterInputPopover, {\n            getPopupContainer: triggerNode => triggerNode.parentNode,\n            parameters: {\n              value: 'number'\n            },\n            onSubmit: params => {\n              this.handleSelectApi(apiName, _objectSpread({\n                key: nodeKey\n              }, params));\n              this.setState({\n                isMenuVisible: false\n              });\n            }\n          }, __jsx(\"div\", null, label)));\n      }\n    }));\n  }\n\n  getWidthHeightAndCoordinate() {\n    const {\n      coordinate,\n      scale\n    } = this.props;\n\n    try {\n      const linkedListNode = document.querySelector('g > .linked-list-block__wrapper'); //@ts-ignore\n\n      const {\n        width,\n        height\n      } = linkedListNode === null || linkedListNode === void 0 ? void 0 : linkedListNode.getBoundingClientRect();\n      return {\n        //@ts-ignore\n        width: width + 40,\n        //@ts-ignore\n        height: height + 30,\n        //@ts-ignore\n        top: coordinate.y * scale,\n        //@ts-ignore\n        left: coordinate.x * scale\n      };\n    } catch (e) {\n      console.log(e);\n      return {\n        width: LINKED_LIST_BLOCK_WIDTH + 30,\n        height: LINKED_LIST_BLOCK_HEIGHT + 20,\n        top: coordinate.y,\n        left: coordinate.x\n      };\n    }\n  }\n\n  render() {\n    const {\n      isMenuVisible\n    } = this.state;\n\n    const style = _objectSpread({}, this.getWidthHeightAndCoordinate(), {\n      position: 'absolute'\n    });\n\n    return __jsx(\"div\", {\n      style: style,\n      className: this.produceClassName()\n    }, __jsx(CustomDropDown, {\n      overlay: this.renderMenu(),\n      options: options,\n      onVisibleChange: visible => this.setState({\n        isMenuVisible: visible\n      }),\n      visible: isMenuVisible\n    }));\n  }\n\n}\nexport default LinkedListNodeApiDropdown;","map":null,"metadata":{},"sourceType":"module"}