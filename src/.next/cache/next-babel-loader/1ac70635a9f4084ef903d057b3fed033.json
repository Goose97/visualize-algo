{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport withExtendClassName from 'hocs/withExtendClassName';\n\nclass AutoTransformGroup extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"transformQueue\", void 0);\n\n    _defineProperty(this, \"handleTransitionEnd\", () => {\n      this.dequeueTransformQueue();\n    });\n\n    this.state = {\n      transformSequence: []\n    };\n    this.transformQueue = [];\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      origin: {\n        x: newX,\n        y: newY\n      }\n    } = this.props;\n    const {\n      origin: {\n        x: oldX,\n        y: oldY\n      }\n    } = prevProps;\n    let changes = [];\n    if (oldX !== newX) changes.push({\n      amount: newX - oldX,\n      direction: 'horizontal'\n    });\n    if (oldY !== newY) changes.push({\n      amount: newY - oldY,\n      direction: 'vertical'\n    });\n    if (changes.length) this.applyChanges(changes);\n  }\n\n  applyChanges(changes) {\n    let additionTransfromSequence = changes.map(({\n      direction,\n      amount\n    }) => {\n      switch (direction) {\n        case 'vertical':\n          return `translate(0 ${amount})`;\n\n        case 'horizontal':\n          return `translate(${amount} 0)`;\n      }\n    });\n    this.transformQueue = additionTransfromSequence;\n    this.dequeueTransformQueue();\n  }\n\n  dequeueTransformQueue() {\n    const {\n      transformSequence\n    } = this.state;\n    const transformString = this.transformQueue.shift();\n    if (!transformString) return;\n    this.setState({\n      transformSequence: transformSequence.concat(transformString)\n    });\n  }\n\n  produceTransformString() {\n    const {\n      transformSequence\n    } = this.state;\n    return transformSequence.join(' ');\n  }\n\n  render() {\n    const {\n      children,\n      className\n    } = this.props;\n    return __jsx(\"g\", {\n      transform: this.produceTransformString(),\n      className: className,\n      onTransitionEnd: this.handleTransitionEnd\n    }, children);\n  }\n\n}\n\nexport default withExtendClassName('has-transition')(AutoTransformGroup);","map":null,"metadata":{},"sourceType":"module"}