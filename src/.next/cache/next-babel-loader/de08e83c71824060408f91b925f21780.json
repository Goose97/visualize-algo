{"ast":null,"code":"import { HASH_TABLE_UNIVERSAL_KEY_SIZE } from \"../../constants\";\nexport const caculateKeyHash = (key, universalKeySize) => {\n  const sum = key.split('').reduce((acc, letter) => acc + letter.charCodeAt(0), 0);\n  return sum % universalKeySize;\n};\nexport const initLinearProbeHashTableData = data => {\n  let keys = [];\n  let memoryAddresses = [];\n\n  const findAvailableSlot = key => {\n    let hashAddress = caculateKeyHash(key, HASH_TABLE_UNIVERSAL_KEY_SIZE);\n\n    while (true) {\n      const memoryAddress = memoryAddresses.find(({\n        key\n      }) => key === hashAddress);\n      if (!memoryAddress) return hashAddress;\n      hashAddress++;\n    }\n  };\n\n  const insertKey = (key, value, address) => {\n    keys.push({\n      key,\n      value,\n      address\n    });\n  };\n\n  const insertMemoryAddress = (value, address) => {\n    memoryAddresses.push({\n      key: address,\n      values: [value]\n    });\n  };\n\n  Object.entries(data).forEach(([key, value]) => {\n    const addressToFill = findAvailableSlot(key);\n    insertKey(key, value, addressToFill);\n    insertMemoryAddress(value, addressToFill);\n  });\n  return {\n    keys,\n    memoryAddresses\n  };\n};","map":null,"metadata":{},"sourceType":"module"}