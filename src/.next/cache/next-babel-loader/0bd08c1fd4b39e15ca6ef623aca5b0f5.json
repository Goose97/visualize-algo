{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nconst DEFAULT_ANIMATION_DURATION = 700;\nconst STEP_COUNT = 80; // if max percent is 100 then the circle will disappear because start and end point are the same\n\nconst MAX_PERCENT = 97;\nexport class HighlightCircle extends Component {\n  constructor(props) {\n    super(props); // This state's purpose is to make circling animation\n\n    _defineProperty(this, \"kickStartAnimationInterval\", () => {\n      const {\n        animationDuration\n      } = this.props;\n      const {\n        completePercent\n      } = this.state;\n      const duration = animationDuration || DEFAULT_ANIMATION_DURATION;\n      const stepInterval = duration / STEP_COUNT;\n      const percentIncreaseAtEachStep = 100 / STEP_COUNT;\n      const newPercent = Math.min(MAX_PERCENT, completePercent + percentIncreaseAtEachStep);\n      this.setState({\n        completePercent: newPercent\n      }, () => {\n        if (this.state.completePercent === MAX_PERCENT) return;\n        setTimeout(this.kickStartAnimationInterval, stepInterval);\n      });\n    });\n\n    this.state = {\n      completePercent: 0,\n      isAnimating: true\n    };\n  }\n\n  componentDidMount() {\n    this.kickStartAnimationInterval();\n  }\n\n  caculateArcEndPointAndFlag() {\n    // We will cover each section of the circle one by one\n    const {\n      completePercent\n    } = this.state;\n    const {\n      radius\n    } = this.props;\n    let deltaX;\n    let deltaY;\n\n    if (completePercent <= 25) {\n      const angle = completePercent / 25 * Math.PI / 2;\n      deltaX = Math.sin(angle) * radius;\n      deltaY = (1 - Math.cos(angle)) * radius;\n    } else if (completePercent <= 50) {\n      const angle = (completePercent - 25) / 25 * Math.PI / 2;\n      deltaX = Math.cos(angle) * radius;\n      deltaY = (1 + Math.sin(angle)) * radius;\n    } else if (completePercent <= 75) {\n      const angle = (completePercent - 50) / 25 * Math.PI / 2;\n      deltaX = -Math.sin(angle) * radius;\n      deltaY = (1 + Math.cos(angle)) * radius;\n    } else {\n      const angle = (completePercent - 75) / 25 * Math.PI / 2;\n      deltaX = -Math.cos(angle) * radius;\n      deltaY = (1 - Math.sin(angle)) * radius;\n    }\n\n    return {\n      x: deltaX,\n      y: deltaY,\n      largeArcFlag: completePercent >= 50 ? 1 : 0\n    };\n  }\n\n  render() {\n    const {\n      x,\n      y,\n      radius\n    } = this.props;\n    const {\n      x: endX,\n      y: endY,\n      largeArcFlag\n    } = this.caculateArcEndPointAndFlag();\n    return __jsx(\"path\", {\n      className: \"highlight-circle\",\n      d: `M ${x} ${y - radius} a ${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY}`\n    });\n  }\n\n}\nexport default HighlightCircle;","map":null,"metadata":{},"sourceType":"module"}