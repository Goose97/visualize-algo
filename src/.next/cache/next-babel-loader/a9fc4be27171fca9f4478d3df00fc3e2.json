{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\n\nfunction withExtendClassName(classNameGetter) {\n  return function (Page) {\n    var WrapperComponent = /*#__PURE__*/function (_Component) {\n      _inherits(WrapperComponent, _Component);\n\n      var _super = _createSuper(WrapperComponent);\n\n      function WrapperComponent() {\n        _classCallCheck(this, WrapperComponent);\n\n        return _super.apply(this, arguments);\n      }\n\n      _createClass(WrapperComponent, [{\n        key: \"getExtendedClassName\",\n        value: function getExtendedClassName() {\n          var className = this.props.className;\n          var baseClassName = typeof classNameGetter === 'string' ? classNameGetter : classNameGetter(this.props);\n          return className ? \"\".concat(baseClassName, \" \").concat(className) : baseClassName;\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          //@ts-ignore\n          var _this$props = this.props,\n              innerRef = _this$props.innerRef,\n              rest = _objectWithoutProperties(_this$props, [\"innerRef\"]);\n\n          return __jsx(Page, _extends({}, rest, {\n            ref: innerRef,\n            className: this.getExtendedClassName()\n          }));\n        }\n      }]);\n\n      return WrapperComponent;\n    }(Component); // return WrapperComponent;\n\n\n    return React.forwardRef(function (props, ref) {\n      return (//@ts-ignore\n        __jsx(WrapperComponent, _extends({\n          innerRef: ref\n        }, props))\n      );\n    });\n  };\n}\n\nexport default withExtendClassName;","map":null,"metadata":{},"sourceType":"module"}