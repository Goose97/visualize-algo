{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faStop, faStepBackward, faFastBackward, faStepForward, faFastForward } from '@fortawesome/free-solid-svg-icons';\nimport { classNameHelper } from 'utils';\nexport class ProgressControl extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleControlProgress\", index => () => {\n      const handlerFunction = this.getHandlerFunction(index);\n      handlerFunction && !this.isButtonDisabled(index) && handlerFunction();\n    });\n\n    _defineProperty(this, \"isButtonDisabled\", buttonIndex => {\n      const {\n        progress,\n        disabled\n      } = this.props;\n      if (disabled) return true;\n\n      switch (buttonIndex) {\n        case 0:\n        case 1:\n          return progress === 0;\n\n        case 3:\n        case 4:\n          return progress === 100;\n\n        default:\n          return false;\n      }\n    });\n  }\n\n  getHandlerFunction(buttonIndex) {\n    const {\n      onFastBackward,\n      onBackward,\n      onPlay,\n      onStop,\n      onForward,\n      onFastForward,\n      autoPlay\n    } = this.props;\n\n    switch (buttonIndex) {\n      case 0:\n        return onFastBackward;\n\n      case 1:\n        return onBackward;\n\n      case 2:\n        return autoPlay ? onStop : onPlay;\n\n      case 3:\n        return onForward;\n\n      case 4:\n        return onFastForward;\n    }\n  }\n\n  renderProgressIndicator() {\n    const {\n      progress\n    } = this.props;\n    const roundedProgress = `${progress.toFixed(2)}%`;\n    return __jsx(\"div\", {\n      className: \"progress-control__progress-indicator\"\n    }, __jsx(\"div\", {\n      className: \"progress-control__progress-bar\",\n      style: {\n        width: roundedProgress\n      }\n    }));\n  }\n\n  produceButtonClassName(buttonIndex) {\n    return classNameHelper({\n      base: 'progress-control__button',\n      disabled: this.isButtonDisabled(buttonIndex),\n      ['play-button']: buttonIndex === 2\n    });\n  }\n\n  render() {\n    const {\n      autoPlay,\n      className\n    } = this.props;\n    let baseClassName = 'progress-control__wrapper';\n    if (className) baseClassName += ` ${className}`;\n    return __jsx(\"div\", {\n      className: baseClassName\n    }, __jsx(\"div\", {\n      className: \"progress-control__button-wrapper\"\n    }, [faFastBackward, faStepBackward, autoPlay ? faStop : faPlay, faStepForward, faFastForward].map((icon, index) => {\n      return __jsx(\"button\", {\n        className: this.produceButtonClassName(index),\n        key: index,\n        onClick: this.handleControlProgress(index)\n      }, __jsx(FontAwesomeIcon, {\n        icon: icon\n      }));\n    })), this.renderProgressIndicator());\n  }\n\n}\nexport default ProgressControl;","map":null,"metadata":{},"sourceType":"module"}