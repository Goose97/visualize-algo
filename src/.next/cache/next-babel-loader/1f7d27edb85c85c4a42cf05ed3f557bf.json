{"ast":null,"code":"import _debounce from \"lodash/debounce\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass CanvasObserver {\n  constructor() {\n    _defineProperty(this, \"regisiteredCallback\", void 0);\n\n    _defineProperty(this, \"triggerRegisteredCallbacks\", _debounce(() => {\n      this.regisiteredCallback.forEach(callback => callback());\n    }, 300));\n\n    this.regisiteredCallback = [];\n  }\n\n  register(callback) {\n    this.regisiteredCallback.push(callback);\n  }\n\n  initiate() {\n    if (typeof document === 'undefined') return;\n    const canvasNode = document.querySelector('.canvas-container > svg');\n    if (!canvasNode) return;\n    const config = {\n      attributes: true,\n      childList: true,\n      subtree: true\n    };\n\n    const callback = mutationsList => {\n      for (let mutation of mutationsList) {\n        if (mutation.type === 'attributes' && mutation.attributeName === 'viewBox') {\n          this.triggerRegisteredCallbacks();\n        }\n      }\n    };\n\n    const observer = new MutationObserver(callback);\n    observer.observe(canvasNode, config);\n  }\n\n}\n\nconst singletonCanvasObserver = new CanvasObserver();\nexport default singletonCanvasObserver;","map":null,"metadata":{},"sourceType":"module"}