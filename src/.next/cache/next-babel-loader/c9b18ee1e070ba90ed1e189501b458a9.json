{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _pick from \"lodash/pick\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { MemoryBlock, AutoTransformGroup } from 'components';\nimport { ARRAY_BLOCK_WIDTH, ARRAY_BLOCK_HEIGHT, ARRAY_COLUMN_GAP, ARRAY_COLUMN_HEIGHT, ARRAY_COLUMN_HEIGHT_BASE, LINE_HEIGHT } from \"../../constants\";\n\nvar ArrayMemoryBlock = /*#__PURE__*/function (_Component) {\n  _inherits(ArrayMemoryBlock, _Component);\n\n  var _super = _createSuper(ArrayMemoryBlock);\n\n  function ArrayMemoryBlock(props) {\n    var _this;\n\n    _classCallCheck(this, ArrayMemoryBlock);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"initialCoordinate\", void 0);\n\n    _this.initialCoordinate = _this.calculatePosition();\n    return _this;\n  }\n\n  _createClass(ArrayMemoryBlock, [{\n    key: \"calculatePosition\",\n    value: function calculatePosition() {\n      var _this$props = this.props,\n          index = _this$props.index,\n          blockType = _this$props.blockType,\n          value = _this$props.value,\n          isInsertionSorting = _this$props.isInsertionSorting;\n\n      var _this$calculateSizeBl = this.calculateSizeBlock(blockType, this.parseValueToNumber(value)),\n          height = _this$calculateSizeBl.height;\n\n      var xPosition = 0;\n      var yPosition = isInsertionSorting ? 100 : 0;\n\n      switch (blockType) {\n        case 'block':\n          xPosition = ARRAY_BLOCK_WIDTH * index;\n          break;\n\n        case 'column':\n          xPosition = (ARRAY_BLOCK_WIDTH + ARRAY_COLUMN_GAP) * index;\n          yPosition = -height;\n          break;\n      }\n\n      return {\n        x: xPosition,\n        y: yPosition\n      };\n    }\n  }, {\n    key: \"parseValueToNumber\",\n    value: function parseValueToNumber(value) {\n      if (!value) return 0;\n      if (typeof value === 'string') return _parseInt(value);\n      return value;\n    }\n  }, {\n    key: \"calculateLine\",\n    value: function calculateLine() {\n      var index = this.props.index;\n      var x1, y1, x2, y2;\n      x1 = ARRAY_BLOCK_WIDTH * (index + 1);\n      y1 = ARRAY_BLOCK_HEIGHT + LINE_HEIGHT;\n      x2 = x1;\n      y2 = -LINE_HEIGHT;\n      return {\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2\n      };\n    }\n  }, {\n    key: \"calculateSizeBlock\",\n    value: function calculateSizeBlock(blockType, value) {\n      var height = 0;\n\n      switch (blockType) {\n        case 'block':\n          height = ARRAY_BLOCK_HEIGHT;\n          break;\n\n        case 'column':\n          height = ARRAY_COLUMN_HEIGHT * value + ARRAY_COLUMN_HEIGHT_BASE;\n          break;\n      }\n\n      return {\n        width: ARRAY_BLOCK_WIDTH,\n        height: height\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          value = _this$props2.value,\n          visible = _this$props2.visible,\n          blockType = _this$props2.blockType;\n      var propsToPass = ['focus', 'visited', 'label', 'className', 'highlight', 'blur', 'transform', 'labelDirection'];\n      return __jsx(AutoTransformGroup, {\n        origin: this.calculatePosition()\n      }, __jsx(MemoryBlock, _extends({}, this.initialCoordinate, this.calculateSizeBlock(blockType, this.parseValueToNumber(value)), {\n        type: \"rectangle\"\n      }, _pick(this.props, propsToPass), {\n        visible: !!visible,\n        value: value\n      })));\n    }\n  }]);\n\n  return ArrayMemoryBlock;\n}(Component);\n\nexport default ArrayMemoryBlock;","map":null,"metadata":{},"sourceType":"module"}