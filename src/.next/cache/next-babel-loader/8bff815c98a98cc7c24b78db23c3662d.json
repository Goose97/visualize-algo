{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar DEFAULT_DURATION = 1500;\nexport var Instructions = /*#__PURE__*/function () {\n  function Instructions() {\n    _classCallCheck(this, Instructions);\n\n    _defineProperty(this, \"instructions\", void 0);\n\n    this.instructions = [];\n  }\n\n  _createClass(Instructions, [{\n    key: \"push\",\n    value: function push(instruction) {\n      var newInstruction = _Object$assign({\n        duration: DEFAULT_DURATION\n      }, instruction);\n\n      this.instructions.push(newInstruction);\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      return this.instructions;\n    }\n  }]);\n\n  return Instructions;\n}();\nexport var LinkedListNode = function LinkedListNode(val, key) {\n  _classCallCheck(this, LinkedListNode);\n\n  _defineProperty(this, \"val\", void 0);\n\n  _defineProperty(this, \"next\", void 0);\n\n  _defineProperty(this, \"key\", void 0);\n\n  this.val = val;\n  this.next = null;\n  this.key = key;\n};\nexport var initLinkedList = function initLinkedList(array) {\n  var head;\n  var current;\n\n  for (var i = 0; i < array.length; i++) {\n    var newNode = new LinkedListNode(array[i], i);\n\n    if (current) {\n      current.next = newNode;\n      current = current.next;\n    } else {\n      // first node\n      head = newNode;\n      current = head;\n    }\n  } //@ts-ignore\n\n\n  return head;\n};\nexport var convertLinkedListToArray = function convertLinkedListToArray(linkedList) {\n  var result = [];\n  var current = linkedList;\n\n  while (current) {\n    result.push(current.val);\n    current = current.next;\n  }\n\n  return result;\n};","map":null,"metadata":{},"sourceType":"module"}