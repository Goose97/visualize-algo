{"ast":null,"code":"import _compose from \"lodash/fp/compose\";\nimport produce from 'immer';\n\n// Nhận vào trạng thái hiện tại của data structure\n// và operation tương ứng. Trả về trạng thái mới\nconst transformBSTModel = (currentModel, operation, payload) => {\n  switch (operation) {\n    case 'visited':\n      {\n        const [nodeKeyToVisit] = payload;\n        return produce(currentModel, draft => {\n          const treeNode = draft.find(({\n            key\n          }) => key === nodeKeyToVisit);\n          if (treeNode) treeNode.visited = true;\n        });\n      }\n\n    case 'focus':\n      {\n        const [nodeKeyToFocus] = payload;\n        return produce(currentModel, draft => {\n          const treeNode = draft.find(({\n            key\n          }) => key === nodeKeyToFocus);\n          if (treeNode) treeNode.focus = true;\n        });\n      }\n\n    case 'resetFocus':\n      {\n        return produce(currentModel, draft => {\n          draft.forEach(node => node.focus = false);\n        });\n      }\n\n    case 'insert':\n      {\n        const [parentKey, newNode] = payload;\n        return produce(currentModel, draft => {\n          const parentNode = draft.find(({\n            key\n          }) => key === parentKey);\n\n          if (parentNode) {\n            if (newNode.value > parentNode.value) {\n              parentNode.right = newNode.key;\n            } else {\n              parentNode.left = newNode.key;\n            }\n\n            draft.push(newNode);\n          }\n        });\n      }\n\n    case 'delete':\n      {\n        const [keyToDelete] = payload;\n        return produce(currentModel, draft => {\n          const nodeToDelete = draft.find(({\n            key\n          }) => key === keyToDelete);\n          if (nodeToDelete) nodeToDelete.visible = false;\n        });\n      }\n\n    case 'focusToDelete':\n      {\n        const [keyToDelete] = payload;\n        return produce(currentModel, draft => {\n          const nodeToDelete = draft.find(({\n            key\n          }) => key === keyToDelete);\n          if (nodeToDelete) nodeToDelete.aboutToDelete = true;\n        });\n      }\n\n    case 'setValue':\n      {\n        const [value, keyToSet] = payload;\n        return produce(currentModel, draft => {\n          const nodeToSetValue = draft.find(({\n            key\n          }) => key === keyToSet);\n          if (nodeToSetValue) nodeToSetValue.value = value;\n        });\n      }\n\n    case 'label':\n      {\n        const [label, nodeKeyToLabel, removeThisLabelInOtherNode] = payload;\n        return produce(currentModel, draft => {\n          if (removeThisLabelInOtherNode) {\n            draft.forEach(node => {\n              const oldLabel = node.label;\n\n              if (oldLabel) {\n                //@ts-ignore\n                const newLabel = oldLabel.filter(item => item !== label);\n                node.label = newLabel;\n              }\n            });\n          }\n\n          const nodeToLabel = draft.find(({\n            key\n          }) => key === nodeKeyToLabel);\n\n          if (nodeToLabel) {\n            const oldLabel = nodeToLabel.label || []; //@ts-ignore\n\n            nodeToLabel.label = oldLabel.concat(label);\n          }\n        });\n      }\n\n    case 'resetAll':\n      {\n        // Reset focus, visited and label\n        const listTransformation = ['resetFocus', 'resetVisited', 'resetLabel'].map(method => model => transformBSTModel(model, method, []));\n        return _compose(listTransformation)(currentModel);\n      }\n\n    case 'resetVisited':\n      {\n        return produce(currentModel, draft => {\n          draft.forEach(item => item.visited = false);\n        });\n      }\n\n    case 'resetLabel':\n      {\n        return produce(currentModel, draft => {\n          draft.forEach(item => item.label = []);\n        });\n      }\n\n    default:\n      return currentModel;\n  }\n};\n\nexport default transformBSTModel;","map":null,"metadata":{},"sourceType":"module"}