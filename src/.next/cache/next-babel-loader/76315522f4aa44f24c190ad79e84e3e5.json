{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button, CustomModal, GraphDS } from 'components';\nimport withExtendClassName from 'hocs/withExtendClassName';\nimport { caculatePointerPathFromTwoNodeCenter, caculateDistanceToALine } from 'utils';\nimport transformGraphModel from 'transformers/Graph';\nimport { GRAPH_NODE_RADIUS } from \"../../constants\";\nexport var InitGraphInput = /*#__PURE__*/function (_Component) {\n  _inherits(InitGraphInput, _Component);\n\n  var _super = _createSuper(InitGraphInput);\n\n  function InitGraphInput(props) {\n    var _this;\n\n    _classCallCheck(this, InitGraphInput);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"inputRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"svgWrapper\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"currentlyHoverOnEdges\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e) {\n      var stateChanges = _this.getBSTRepresentationFromInputText(e.target.value); //@ts-ignore\n\n\n      _this.setState(_objectSpread({}, stateChanges, {\n        textInput: e.target.value\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"focusToInput\", function () {\n      var inputElement = _this.inputRef.current;\n      var htmlInput = ReactDOM.findDOMNode(inputElement);\n      htmlInput === null || htmlInput === void 0 ? void 0 : htmlInput.focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMouseEnter\", function (e) {\n      var svgElement = e.currentTarget;\n\n      if (svgElement) {\n        _this.svgWrapper = svgElement; //@ts-ignore\n\n        svgElement.addEventListener('mousemove', function (e) {\n          return _this.handleMouseMove(e);\n        });\n        svgElement.addEventListener('mouseleave', function () {\n          return _this.handleMouseLeave();\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMouseMove\", function (e) {\n      var ghostNode = _this.svgWrapper.querySelector('.init-graph-canvas__ghost-node');\n\n      if (!ghostNode) return;\n\n      var mousePosition = _this.getRelativeMousePositionWithSvg(e); // Make ghost node follow mouse position\n\n\n      var transformString = \"translate(\".concat(mousePosition.x, \", \").concat(mousePosition.y, \")\");\n      ghostNode.setAttribute('transform', transformString); // Hide ghost node if currently hover on ghost edge\n\n      var ghostEdgesMouseCurrentlyHover = _this.getGhostEdgesMouseCurrentlyHover(e);\n\n      ghostNode.setAttribute('opacity', ghostEdgesMouseCurrentlyHover.length ? '0' : '1'); // Hide ghost edges which are not currently hover on\n      // Show those got hovered\n\n      _this.showAndHideGhostEdges(ghostEdgesMouseCurrentlyHover); // Save current hovered edges\n\n\n      _this.currentlyHoverOnEdges = ghostEdgesMouseCurrentlyHover;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMouseLeave\", function () {\n      var ghostNode = _this.svgWrapper.querySelector('.init-graph-canvas__ghost-node');\n\n      var transformString = \"translate(-100, -100)\";\n      ghostNode && ghostNode.setAttribute('transform', transformString);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClickOnSvg\", function (e) {\n      try {\n        var svgElement = e.currentTarget;\n        var ghostNode = svgElement.querySelector('.init-graph-canvas__ghost-node'); //@ts-ignore\n\n        var transform = ghostNode.getAttribute('transform');\n        var regex = /(?<=translate\\()(\\d+).*?(\\d+)(?=\\))/;\n        var match = transform === null || transform === void 0 ? void 0 : transform.match(regex);\n        var currentMouseCoordinate = {\n          //@ts-ignore\n          x: +match[1],\n          //@ts-ignore\n          y: +match[2]\n        };\n\n        if (_this.currentlyHoverOnEdges.length) {\n          _this.addNewEdges(_this.currentlyHoverOnEdges);\n        } else {\n          _this.addNewNode(currentMouseCoordinate);\n        }\n      } catch (error) {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOk\", function () {\n      var onSubmit = _this.props.onSubmit;\n      var graphData = _this.state.graphData; // Shift all node to left and top some amount so the whole DS start at 0 and 0\n\n      var amountToShiftLeft = Math.min.apply(Math, _toConsumableArray(graphData.map(function (_ref) {\n        var x = _ref.x;\n        return x;\n      })));\n      var amountToShiftTop = Math.min.apply(Math, _toConsumableArray(graphData.map(function (_ref2) {\n        var y = _ref2.y;\n        return y;\n      })));\n      var shiftedGraphData = graphData.map(function (node) {\n        return _objectSpread({}, node, {\n          x: node.x - amountToShiftLeft,\n          y: node.y - amountToShiftTop\n        });\n      });\n      onSubmit(shiftedGraphData);\n    });\n\n    _this.state = {\n      input: [],\n      error: null,\n      isModalVisible: false,\n      graphData: []\n    };\n    _this.inputRef = React.createRef();\n    _this.currentlyHoverOnEdges = [];\n    return _this;\n  }\n\n  _createClass(InitGraphInput, [{\n    key: \"getBSTRepresentationFromInputText\",\n    value: function getBSTRepresentationFromInputText(inputText) {\n      var regex = /^\\[([(\\d|null),\\s]+)\\]$/;\n      var match = inputText.match(regex);\n      if (!match) return {\n        error: 'Sai cú pháp'\n      };\n      return {\n        input: match[1].split(',').map(function (string) {\n          return string.includes('null') ? null : _parseInt(string);\n        }).filter(function (item) {\n          return item === null || typeof item === 'number';\n        }),\n        error: null\n      };\n    }\n  }, {\n    key: \"renderGhostNode\",\n    value: function renderGhostNode() {\n      return __jsx(\"g\", {\n        className: \"init-graph-canvas__ghost-node\",\n        transform: \"translate(-100, -100)\"\n      }, __jsx(\"circle\", {\n        cx: 0,\n        cy: 0,\n        r: GRAPH_NODE_RADIUS\n      }), __jsx(\"text\", {\n        x: 0,\n        y: 0,\n        dominantBaseline: \"middle\",\n        textAnchor: \"middle\"\n      }, \"+\"));\n    }\n  }, {\n    key: \"showAndHideGhostEdges\",\n    value: function showAndHideGhostEdges(currentHoverOnEdges) {\n      currentHoverOnEdges.forEach(function (edge) {\n        edge.parentNode.classList.add('show');\n      });\n      var allGhostEdges = this.svgWrapper.querySelectorAll('.init-graph-canvas__ghost-edge-hover-area');\n\n      _Array$from(allGhostEdges).forEach(function (edge) {\n        if (!currentHoverOnEdges.includes(edge)) edge.parentNode.classList.remove('show');\n      });\n    }\n  }, {\n    key: \"getRelativeMousePositionWithSvg\",\n    value: function getRelativeMousePositionWithSvg(e) {\n      var _getBoundingClientRec = this.svgWrapper.getBoundingClientRect(),\n          left = _getBoundingClientRec.left,\n          top = _getBoundingClientRec.top;\n\n      var offsetLeft = e.clientX - left;\n      var offsetTop = e.clientY - top;\n      return {\n        x: offsetLeft,\n        y: offsetTop\n      };\n    }\n  }, {\n    key: \"getGhostEdgesMouseCurrentlyHover\",\n    value: function getGhostEdgesMouseCurrentlyHover(mouseEvent) {\n      var allGhostEdges = this.svgWrapper.querySelectorAll('.init-graph-canvas__ghost-edge > .init-graph-canvas__ghost-edge-hover-area');\n\n      var _this$getRelativeMous = this.getRelativeMousePositionWithSvg(mouseEvent),\n          mouseX = _this$getRelativeMous.x,\n          mouseY = _this$getRelativeMous.y;\n\n      if (!allGhostEdges) return [];\n      return _Array$from(allGhostEdges).filter(function (item) {\n        // We consider point which stay in range of the line\n        // and also have distance to the line smaller than 10\n        var _map = ['start-x', 'start-y', 'end-x', 'end-y'].map(function (attrs) {\n          var value = item.getAttribute(attrs);\n          return value != null ? _parseInt(value) : 0;\n        }),\n            _map2 = _slicedToArray(_map, 4),\n            startX = _map2[0],\n            startY = _map2[1],\n            endX = _map2[2],\n            endY = _map2[3];\n\n        var inRangeOfLine = (mouseY - startY) * (mouseY - endY) < 0 || (mouseX - startX) * (mouseX - endX) < 0;\n        var distance = caculateDistanceToALine({\n          x: mouseX,\n          y: mouseY\n        }, {\n          x: startX,\n          y: startY\n        }, {\n          x: endX,\n          y: endY\n        });\n        return inRangeOfLine && distance < 25;\n      });\n    }\n  }, {\n    key: \"addNewEdges\",\n    value: function addNewEdges(edgesPathElement) {\n      var graphData = this.state.graphData;\n\n      var addOneEdge = function addOneEdge(data, edgeElement) {\n        var edgeKey = edgeElement.parentNode.getAttribute('edgekey');\n        if (!edgeKey) return data;\n\n        var _edgeKey$split$map = edgeKey.split('-').map(function (item) {\n          return _parseInt(item);\n        }),\n            _edgeKey$split$map2 = _slicedToArray(_edgeKey$split$map, 2),\n            nodeA = _edgeKey$split$map2[0],\n            nodeB = _edgeKey$split$map2[1];\n\n        return transformGraphModel(data, 'addEdge', [nodeA, nodeB]);\n      };\n\n      var graphDataAfterAddEdges = edgesPathElement.reduce(function (finalState, edgeElement) {\n        return addOneEdge(finalState, edgeElement);\n      }, graphData);\n      this.setState({\n        graphData: graphDataAfterAddEdges\n      });\n    }\n  }, {\n    key: \"addNewNode\",\n    value: function addNewNode(coordinate) {\n      var graphData = this.state.graphData;\n      var biggestKey = Math.max.apply(Math, _toConsumableArray(graphData.map(function (_ref3) {\n        var key = _ref3.key;\n        return key;\n      })));\n      var newNode = {\n        x: coordinate.x - GRAPH_NODE_RADIUS,\n        y: coordinate.y - GRAPH_NODE_RADIUS,\n        key: ~~biggestKey + 1,\n        adjacentNodes: [],\n        value: ~~biggestKey + 1,\n        visible: true\n      };\n      this.setState({\n        graphData: graphData.concat(newNode)\n      });\n    }\n  }, {\n    key: \"renderGhostEdges\",\n    value: function renderGhostEdges() {\n      var graphData = this.state.graphData;\n      if (graphData.length < 2) return null;\n      var result = [];\n\n      for (var i = 0; i < graphData.length; i++) {\n        for (var j = i + 1; j < graphData.length; j++) {\n          var ghoseEdge = this.renderOneGhostEdge(graphData[i], graphData[j]);\n          result.push(ghoseEdge);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"renderOneGhostEdge\",\n    value: function renderOneGhostEdge(nodeA, nodeB) {\n      var nodeACenter = {\n        x: nodeA.x + GRAPH_NODE_RADIUS,\n        y: nodeA.y + GRAPH_NODE_RADIUS\n      };\n      var nodeBCenter = {\n        x: nodeB.x + GRAPH_NODE_RADIUS,\n        y: nodeB.y + GRAPH_NODE_RADIUS\n      };\n      var pathAndRotation = caculatePointerPathFromTwoNodeCenter(nodeACenter, nodeBCenter, GRAPH_NODE_RADIUS, true);\n      var key = \"\".concat(nodeA.key, \"-\").concat(nodeB.key);\n      return (//@ts-ignore\n        __jsx(\"g\", {\n          className: \"init-graph-canvas__ghost-edge\",\n          key: key,\n          edgekey: key\n        }, __jsx(\"path\", {\n          transform: pathAndRotation.transform,\n          d: pathAndRotation.path,\n          \"start-x\": nodeACenter.x,\n          \"start-y\": nodeACenter.y,\n          \"end-x\": nodeBCenter.x,\n          \"end-y\": nodeBCenter.y,\n          className: \"init-graph-canvas__ghost-edge-hover-area stroke-1\"\n        }), __jsx(\"path\", _extends({}, pathAndRotation, {\n          d: pathAndRotation.path,\n          className: \"default-stroke stroke-2\"\n        })))\n      );\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          isModalVisible = _this$state.isModalVisible,\n          graphData = _this$state.graphData;\n      var className = this.props.className;\n\n      var previewWindow = __jsx(\"div\", {\n        className: \"init-bst-modal__preview fx-7\"\n      }, __jsx(\"svg\", {\n        className: \"init-graph-canvas__wrapper h-full w-full\",\n        onMouseEnter: this.handleMouseEnter,\n        onClick: this.handleClickOnSvg\n      }, this.renderGhostNode(), this.renderGhostEdges(), __jsx(GraphDS, {\n        data: graphData,\n        controlled: true,\n        x: 0,\n        y: 0,\n        instructions: []\n      })));\n\n      return __jsx(Button, {\n        type: \"primary\",\n        className: className,\n        onClick: function onClick() {\n          return _this2.setState({\n            isModalVisible: true\n          });\n        }\n      }, \"Create new graph\", __jsx(CustomModal, {\n        visible: isModalVisible,\n        title: \"Construct new graph\",\n        onCancel: function onCancel() {\n          return _this2.setState({\n            isModalVisible: false\n          });\n        },\n        onOk: this.handleOk\n      }, __jsx(\"div\", {\n        className: \"init-bst-modal__wrapper fx\"\n      }, previewWindow)));\n    }\n  }]);\n\n  return InitGraphInput;\n}(Component);\nexport default withExtendClassName('f-big-2 px-6 py-2')(InitGraphInput);","map":null,"metadata":{},"sourceType":"module"}