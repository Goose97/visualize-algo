{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { GraphDS, StackDS, ArrayDS, QueueDS, CanvasContainer, InitGraphInput } from 'components';\nimport withDSPage from 'hocs/withDSPage';\nimport { extractInstructionFromDescription } from 'utils';\nimport { graphInstruction } from 'instructions/Graph';\nimport { code, explanation } from 'codes/Graph';\nimport { QUEUE_BLOCK_WIDTH } from \"../constants\"; // const data =\n// '[{\"x\":0,\"y\":0,\"key\":1,\"adjacentNodes\":[5,3,6],\"value\":1,\"visible\":true},{\"x\":74,\"y\":144,\"key\":2,\"adjacentNodes\":[5,4],\"value\":2,\"visible\":true},{\"x\":316,\"y\":175,\"key\":3,\"adjacentNodes\":[5,1],\"value\":3,\"visible\":true},{\"x\":370,\"y\":41,\"key\":4,\"adjacentNodes\":[5,2,6],\"value\":4,\"visible\":true},{\"x\":206,\"y\":237,\"key\":5,\"adjacentNodes\":[1,2,3,4],\"value\":5,\"visible\":true},{\"x\":531,\"y\":91,\"key\":6,\"adjacentNodes\":[1,4],\"value\":6,\"visible\":true}]';\n\nexport var BinarySearchTreePage = /*#__PURE__*/function (_Component) {\n  _inherits(BinarySearchTreePage, _Component);\n\n  var _super = _createSuper(BinarySearchTreePage);\n\n  function BinarySearchTreePage() {\n    _classCallCheck(this, BinarySearchTreePage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BinarySearchTreePage, [{\n    key: \"getWidthOfDS\",\n    value: function getWidthOfDS(graphModel, dataStructure) {\n      switch (dataStructure) {\n        case 'graph':\n          {\n            if (!graphModel) return 0;\n            return Math.max.apply(Math, _toConsumableArray(graphModel.map(function (_ref) {\n              var x = _ref.x;\n              return x;\n            })));\n          }\n\n        case 'queue':\n          {\n            if (!graphModel) return 0;\n            return graphModel.length * QUEUE_BLOCK_WIDTH + 50;\n          }\n      }\n    }\n  }, {\n    key: \"renderExtraDSForApi\",\n    value: function renderExtraDSForApi() {\n      var _this$props = this.props,\n          currentApi = _this$props.currentApi,\n          data = _this$props.data,\n          stepDescription = _this$props.stepDescription,\n          currentStep = _this$props.currentStep;\n\n      switch (currentApi) {\n        case 'dfs':\n          {\n            var stackInstruction = extractInstructionFromDescription(stepDescription, 'stack');\n\n            var _arrayInstruction = extractInstructionFromDescription(stepDescription, 'array');\n\n            var _widthOfGraph = this.getWidthOfDS(data, 'graph');\n\n            var _baseProps = {\n              initialData: [],\n              currentStep: currentStep,\n              totalStep: stepDescription.length - 1\n            };\n            return __jsx(React.Fragment, null, __jsx(StackDS, _extends({\n              x: _widthOfGraph + 400,\n              y: 300,\n              instructions: stackInstruction\n            }, _baseProps)), __jsx(ArrayDS, _extends({\n              x: _widthOfGraph + 400,\n              y: 450,\n              instructions: _arrayInstruction,\n              blockType: \"block\"\n            }, _baseProps)));\n          }\n\n        case 'bfs':\n          var queueInstruction = extractInstructionFromDescription(stepDescription, 'queue');\n          var arrayInstruction = extractInstructionFromDescription(stepDescription, 'array');\n          var widthOfGraph = this.getWidthOfDS(data, 'graph');\n          var widthOfQueue = this.getWidthOfDS(data, 'queue');\n          var baseProps = {\n            initialData: [],\n            currentStep: currentStep,\n            totalStep: stepDescription.length - 1\n          };\n          return __jsx(React.Fragment, null, __jsx(QueueDS, _extends({\n            x: widthOfGraph + widthOfQueue / 3 + 400,\n            y: 300,\n            instructions: queueInstruction\n          }, baseProps)), __jsx(ArrayDS, _extends({\n            x: widthOfGraph + 400,\n            y: 450,\n            instructions: arrayInstruction,\n            blockType: \"block\"\n          }, baseProps)));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          data = _this$props2.data,\n          onDataChange = _this$props2.onDataChange,\n          currentStep = _this$props2.currentStep,\n          stepDescription = _this$props2.stepDescription,\n          autoPlay = _this$props2.autoPlay,\n          executedApiCount = _this$props2.executedApiCount,\n          sideBarWidth = _this$props2.sideBarWidth,\n          onExecuteApi = _this$props2.onExecuteApi;\n      var graphInstruction = extractInstructionFromDescription(stepDescription, 'graph');\n      return data ? __jsx(CanvasContainer, null, __jsx(GraphDS, {\n        x: 200,\n        y: 200,\n        instructions: graphInstruction,\n        initialData: data,\n        currentStep: currentStep,\n        totalStep: stepDescription.length - 1,\n        handleExecuteApi: onExecuteApi,\n        interactive: true,\n        dropdownDisabled: autoPlay,\n        executedApiCount: executedApiCount\n      }), this.renderExtraDSForApi()) : __jsx(\"div\", {\n        className: \"h-full fx-center linked-list-page__init-button\",\n        style: {\n          transform: \"translateX(-\".concat((sideBarWidth || 0) / 2, \"px)\")\n        }\n      }, __jsx(InitGraphInput, {\n        onSubmit: onDataChange\n      }));\n    }\n  }]);\n\n  return BinarySearchTreePage;\n}(Component);\nexport default withDSPage({\n  code: code,\n  explanation: explanation,\n  instructionGenerator: graphInstruction\n})(BinarySearchTreePage);","map":null,"metadata":{},"sourceType":"module"}