{"ast":null,"code":"import _compose from \"lodash/fp/compose\";\nimport _uniq from \"lodash/uniq\";\nimport produce from 'immer';\n\n// Nhận vào trạng thái hiện tại của data structure\n// và operation tương ứng. Trả về trạng thái mới\nconst transformGraphModel = (currentModel, operation, payload) => {\n  switch (operation) {\n    case 'addEdge':\n      {\n        const [nodeAKey, nodeBKey] = payload;\n        return produce(currentModel, draft => {\n          const nodeA = draft.find(({\n            key\n          }) => key === nodeAKey);\n          const nodeB = draft.find(({\n            key\n          }) => key === nodeBKey);\n          if (!nodeA || !nodeB) return;\n          nodeA.adjacentNodes.push(nodeBKey);\n          nodeA.adjacentNodes = _uniq(nodeA.adjacentNodes);\n          nodeB.adjacentNodes.push(nodeAKey);\n          nodeB.adjacentNodes = _uniq(nodeB.adjacentNodes);\n        });\n      }\n\n    case 'focus':\n      {\n        const [key, keepOtherNodeFocus] = payload;\n        return produce(currentModel, draft => {\n          if (!keepOtherNodeFocus) draft.forEach(item => item.focus = false); // Nếu index === null nghĩa là đang unfocus tất cả các node\n\n          if (key !== null) {\n            const nodeToFocus = draft.find(({\n              key: nodeKey\n            }) => nodeKey === key);\n            if (nodeToFocus) nodeToFocus.focus = true;\n          }\n        });\n      }\n\n    case 'visited':\n      {\n        const [keyToVisited] = payload;\n        return produce(currentModel, draft => {\n          const nodeToVisited = draft.find(({\n            key\n          }) => key === keyToVisited);\n          if (nodeToVisited) nodeToVisited.visited = true;\n        });\n      }\n\n    case 'highlight':\n      {\n        const [keyToHighlight] = payload;\n        return produce(currentModel, draft => {\n          const listKey = Array.isArray(keyToHighlight) ? keyToHighlight : [keyToHighlight];\n          listKey.forEach(item => {\n            const nodeToHighlight = draft.find(({\n              key\n            }) => key === item);\n            if (nodeToHighlight) nodeToHighlight.circleAround = true;\n          });\n        });\n      }\n\n    case 'highlightEdge':\n      {\n        const [from, to] = payload;\n        return produce(currentModel, draft => {\n          const fromNode = draft.find(({\n            key\n          }) => key === from);\n          const toNode = draft.find(({\n            key\n          }) => key === to);\n          if (!fromNode || !toNode) return;\n          {\n            const oldHighlightEdges = fromNode.highlightEdges || [];\n\n            const newHighlightEdges = _uniq(oldHighlightEdges.concat(to));\n\n            fromNode.highlightEdges = newHighlightEdges;\n          }\n          {\n            const oldHighlightEdges = toNode.highlightEdges || [];\n\n            const newHighlightEdges = _uniq(oldHighlightEdges.concat(from));\n\n            toNode.highlightEdges = newHighlightEdges;\n          }\n        });\n      }\n\n    case 'resetAll':\n      {\n        // Reset focus, visited and label\n        const listTransformation = ['resetFocus', 'resetVisited', 'resetLabel', 'resetHighlight'].map(method => model => transformGraphModel(model, method, []));\n        return _compose(listTransformation)(currentModel);\n      }\n\n    case 'resetFocus':\n      {\n        return produce(currentModel, draft => {\n          draft.forEach(item => item.focus = false);\n        });\n      }\n\n    case 'resetVisited':\n      {\n        return produce(currentModel, draft => {\n          draft.forEach(item => item.visited = false);\n        });\n      }\n\n    case 'resetLabel':\n      {\n        return produce(currentModel, draft => {\n          draft.forEach(item => item.label = []);\n        });\n      }\n\n    case 'resetHighlight':\n      {\n        // reset highlight of node and edges\n        return produce(currentModel, draft => {\n          draft.forEach(item => {\n            item.circleAround = false;\n            item.highlightEdges = [];\n          });\n        });\n      }\n\n    default:\n      return currentModel;\n  }\n};\n\nexport default transformGraphModel;","map":null,"metadata":{},"sourceType":"module"}