{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { HTMLRenderer, DropdownWithParamsInput } from 'components'; // import BSTNodeApiDropdown from './BSTNodeApiDropdown';\n\nimport { getCanvasScaleFactor } from 'utils';\nconst options = [{\n  label: 'Depth-first search',\n  value: 'dfs'\n}, {\n  label: 'Breadth-first search',\n  value: 'bfs'\n}];\nconst requiredParams = {\n  dfs: {\n    startAt: 'number'\n  },\n  bfs: {\n    startAt: 'number'\n  }\n};\nexport class GraphHTML {\n  static renderToView(params) {\n    const {\n      wrapperElement,\n      coordinate,\n      apiHandler,\n      disabled\n    } = params;\n\n    if (wrapperElement) {\n      const {\n        width,\n        height\n      } = wrapperElement.getBoundingClientRect();\n      const scaledFactor = getCanvasScaleFactor(); // const dropdownForEachTreeNode = model.map(({ value, x, y, key }) => (\n      //   <BSTNodeApiDropdown\n      //     value={value}\n      //     handler={apiHandler}\n      //     coordinate={{ x, y }}\n      //     key={key}\n      //   />\n      // ));\n\n      const elementToRender = __jsx(\"div\", {\n        style: {\n          width,\n          height\n        },\n        className: \"graph-html__wrapper\"\n      }, __jsx(DropdownWithParamsInput, {\n        options: options,\n        requiredApiParams: requiredParams,\n        handler: apiHandler,\n        disabled: disabled\n      }));\n\n      const scaledCoordinate = {\n        x: coordinate.x * scaledFactor,\n        y: coordinate.y * scaledFactor\n      };\n      HTMLRenderer.inject(elementToRender, scaledCoordinate, `graph-html__wrapper`);\n    }\n  }\n\n}\nexport default GraphHTML;","map":null,"metadata":{},"sourceType":"module"}