{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport BezierEasing from 'bezier-easing';\nimport { PanZoomController, CanvasObserver } from 'components';\nimport { performAnimation } from 'utils';\nvar SCALE_FACTOR_STEP = 0.2;\n\nvar CanvasContainer = /*#__PURE__*/function (_Component) {\n  _inherits(CanvasContainer, _Component);\n\n  var _super = _createSuper(CanvasContainer);\n\n  function CanvasContainer(props) {\n    var _this;\n\n    _classCallCheck(this, CanvasContainer);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"ref\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"caculateViewBox\", function () {\n      var svgElement = _this.ref.current;\n\n      if (svgElement) {\n        var container = svgElement.parentNode;\n\n        var _container$getBoundin = container.getBoundingClientRect(),\n            width = _container$getBoundin.width,\n            height = _container$getBoundin.height;\n\n        _this.setState({\n          viewBox: {\n            width: width,\n            height: height\n          }\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleZoom\", function (inOrOut) {\n      return function () {\n        var scaleFactor = _this.state.scaleFactor;\n        var targetScaleFactor = inOrOut === 'in' ? scaleFactor + SCALE_FACTOR_STEP : scaleFactor - SCALE_FACTOR_STEP;\n        performAnimation({\n          startValue: scaleFactor,\n          endValue: targetScaleFactor,\n          duration: 300,\n          callback: function callback(newScaleFactor) {\n            return _this.setState({\n              scaleFactor: newScaleFactor\n            });\n          },\n          cubicBezierFunction: BezierEasing(1, 0.02, 0.66, 0.74)\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePanning\", function (deltaX, deltaY) {\n      var _this$state$translate = _this.state.translateFromOrigin,\n          x = _this$state$translate.x,\n          y = _this$state$translate.y;\n\n      _this.setState({\n        translateFromOrigin: {\n          x: x - deltaX,\n          y: y - deltaY\n        }\n      });\n    });\n\n    _this.ref = React.createRef();\n    _this.state = {\n      viewBox: null,\n      scaleFactor: 1,\n      translateFromOrigin: {\n        x: 0,\n        y: 0\n      }\n    };\n    return _this;\n  }\n\n  _createClass(CanvasContainer, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.cleanUpEventListener();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setUpEventListener();\n      this.caculateViewBox();\n      CanvasObserver.initiate();\n    }\n  }, {\n    key: \"setUpEventListener\",\n    value: function setUpEventListener() {\n      window.addEventListener('resize', this.caculateViewBox);\n    }\n  }, {\n    key: \"cleanUpEventListener\",\n    value: function cleanUpEventListener() {\n      window.removeEventListener('resize', this.caculateViewBox);\n    } // TODO: debounce ham nay\n\n  }, {\n    key: \"produceViewBox\",\n    value: function produceViewBox() {\n      var _this$state = this.state,\n          viewBox = _this$state.viewBox,\n          scaleFactor = _this$state.scaleFactor,\n          _this$state$translate2 = _this$state.translateFromOrigin,\n          x = _this$state$translate2.x,\n          y = _this$state$translate2.y;\n\n      if (viewBox) {\n        var width = viewBox.width,\n            height = viewBox.height;\n        return \"\".concat(x, \" \").concat(y, \" \").concat(Math.round(width / scaleFactor), \" \").concat(Math.round(height / scaleFactor));\n      } else {\n        return '0 0 1500 1500';\n      }\n    }\n  }, {\n    key: \"getHTMLTransform\",\n    value: function getHTMLTransform() {\n      var _this$state2 = this.state,\n          _this$state2$translat = _this$state2.translateFromOrigin,\n          x = _this$state2$translat.x,\n          y = _this$state2$translat.y,\n          scaleFactor = _this$state2.scaleFactor;\n      return \"translate(\".concat(-x * scaleFactor, \"px, \").concat(-y * scaleFactor, \"px)\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var scaleFactor = this.state.scaleFactor;\n      var children = this.props.children;\n      return __jsx(\"div\", {\n        className: \"canvas-container\",\n        \"scale-factor\": scaleFactor\n      }, __jsx(\"svg\", {\n        viewBox: this.produceViewBox(),\n        preserveAspectRatio: \"xMinYMin slice\",\n        ref: this.ref\n      }, children), __jsx(\"div\", {\n        id: \"html-overlay\",\n        style: {\n          transform: this.getHTMLTransform()\n        }\n      }), __jsx(PanZoomController, {\n        onZoomIn: this.handleZoom('in'),\n        onZoomOut: this.handleZoom('out'),\n        onPanning: this.handlePanning\n      }));\n    }\n  }]);\n\n  return CanvasContainer;\n}(Component);\n\nexport default CanvasContainer;","map":null,"metadata":{},"sourceType":"module"}