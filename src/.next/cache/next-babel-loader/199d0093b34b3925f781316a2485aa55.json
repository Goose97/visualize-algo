{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { MemoryBlock } from 'components';\nimport { HASH_TABLE_KEYS_WIDTH, HASH_TABLE_KEYS_HEIGHT } from \"../../constants\";\nimport { AutoTransformGroup } from 'components';\n\nclass KeyList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"initialYCoordinationOfKeys\", void 0);\n\n    this.initialYCoordinationOfKeys = this.produceInitialKeyYCoordination();\n  }\n\n  produceInitialKeyYCoordination() {\n    const {\n      hashTableModel\n    } = this.props;\n    return hashTableModel.keys.reduce((acc, {\n      key\n    }, index) => {\n      const y = (HASH_TABLE_KEYS_HEIGHT + 10) * index;\n      return _objectSpread({}, acc, {\n        [key]: y\n      });\n    }, {});\n  }\n\n  getInitialYCoordinate(key) {\n    const {\n      hashTableModel\n    } = this.props;\n    const valueInCache = this.initialYCoordinationOfKeys[key];\n    if (valueInCache != undefined) return valueInCache;\n    const keyIndex = hashTableModel.keys.findIndex(({\n      key: nodeKey\n    }) => key === nodeKey);\n    const value = (HASH_TABLE_KEYS_HEIGHT + 10) * keyIndex;\n    this.initialYCoordinationOfKeys[key] = value;\n    return value;\n  }\n\n  renderListKeyBlock() {\n    const {\n      hashTableModel\n    } = this.props;\n    const shouldHighlightKeys = this.getShouldHighlightKeys();\n    return hashTableModel.keys.map(({\n      key,\n      isNew\n    }, index) => {\n      const y = (HASH_TABLE_KEYS_HEIGHT + 10) * index;\n      return __jsx(AutoTransformGroup, {\n        origin: {\n          x: 0,\n          y\n        },\n        key: key,\n        className: \"long-transition\"\n      }, __jsx(MemoryBlock, {\n        x: 0,\n        y: this.getInitialYCoordinate(key),\n        width: HASH_TABLE_KEYS_WIDTH,\n        height: HASH_TABLE_KEYS_HEIGHT,\n        type: \"rectangle\",\n        value: key,\n        visible: true,\n        isNew: isNew // Highlight one key also means blur every other keys\n        ,\n        blur: shouldHighlightKeys.length ? !shouldHighlightKeys.includes(key) : false\n      }));\n    });\n  }\n\n  getShouldHighlightKeys() {\n    const {\n      hashTableModel\n    } = this.props;\n    return hashTableModel.keys.filter(({\n      highlight\n    }) => highlight).map(({\n      key\n    }) => key);\n  }\n\n  render() {\n    return __jsx(\"g\", {\n      className: \"hash-table-key-list__wrapper\"\n    }, __jsx(\"text\", {\n      x: HASH_TABLE_KEYS_WIDTH / 2,\n      y: -20,\n      dominantBaseline: \"middle\",\n      textAnchor: \"middle\",\n      className: \"f-big-2 has-transition italic\"\n    }, \"Keys\"), this.renderListKeyBlock());\n  }\n\n}\n\nexport default KeyList;","map":null,"metadata":{},"sourceType":"module"}