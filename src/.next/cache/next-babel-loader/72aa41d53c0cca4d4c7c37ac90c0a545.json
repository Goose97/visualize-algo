{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { Component } from 'react';\n\nfunction withExtendClassName(classNameGetter) {\n  return Page => {\n    class WrapperComponent extends Component {\n      getExtendedClassName() {\n        const {\n          className\n        } = this.props;\n        let baseClassName = typeof classNameGetter === 'string' ? classNameGetter : classNameGetter(this.props);\n        return className ? `${baseClassName} ${className}` : baseClassName;\n      }\n\n      render() {\n        //@ts-ignore\n        const _this$props = this.props,\n              {\n          innerRef\n        } = _this$props,\n              rest = _objectWithoutProperties(_this$props, [\"innerRef\"]);\n\n        return __jsx(Page, _extends({}, rest, {\n          ref: innerRef,\n          className: this.getExtendedClassName()\n        }));\n      }\n\n    } // return WrapperComponent;\n\n\n    return React.forwardRef((props, ref) => //@ts-ignore\n    __jsx(WrapperComponent, _extends({\n      innerRef: ref\n    }, props)));\n  };\n}\n\nexport default withExtendClassName;","map":null,"metadata":{},"sourceType":"module"}