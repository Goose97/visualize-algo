{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { HTMLRenderer, DropdownWithParamsInput } from 'components'; // import BSTNodeApiDropdown from './BSTNodeApiDropdown';\n\nimport { getCanvasScaleFactor } from 'utils';\nvar options = [{\n  label: 'Depth-first search',\n  value: 'dfs'\n}, {\n  label: 'Breadth-first search',\n  value: 'bfs'\n}];\nvar requiredParams = {\n  dfs: {\n    startAt: 'number'\n  },\n  bfs: {\n    startAt: 'number'\n  }\n};\nexport var GraphHTML = /*#__PURE__*/function () {\n  function GraphHTML() {\n    _classCallCheck(this, GraphHTML);\n  }\n\n  _createClass(GraphHTML, null, [{\n    key: \"renderToView\",\n    value: function renderToView(params) {\n      var wrapperElement = params.wrapperElement,\n          coordinate = params.coordinate,\n          apiHandler = params.apiHandler,\n          disabled = params.disabled;\n\n      if (wrapperElement) {\n        var _wrapperElement$getBo = wrapperElement.getBoundingClientRect(),\n            width = _wrapperElement$getBo.width,\n            height = _wrapperElement$getBo.height;\n\n        var scaledFactor = getCanvasScaleFactor(); // const dropdownForEachTreeNode = model.map(({ value, x, y, key }) => (\n        //   <BSTNodeApiDropdown\n        //     value={value}\n        //     handler={apiHandler}\n        //     coordinate={{ x, y }}\n        //     key={key}\n        //   />\n        // ));\n\n        var elementToRender = __jsx(\"div\", {\n          style: {\n            width: width,\n            height: height\n          },\n          className: \"graph-html__wrapper\"\n        }, __jsx(DropdownWithParamsInput, {\n          options: options,\n          requiredApiParams: requiredParams,\n          handler: apiHandler,\n          disabled: disabled\n        }));\n\n        var scaledCoordinate = {\n          x: coordinate.x * scaledFactor,\n          y: coordinate.y * scaledFactor\n        };\n        HTMLRenderer.inject(elementToRender, scaledCoordinate, \"graph-html__wrapper\");\n      }\n    }\n  }]);\n\n  return GraphHTML;\n}();\nexport default GraphHTML;","map":null,"metadata":{},"sourceType":"module"}