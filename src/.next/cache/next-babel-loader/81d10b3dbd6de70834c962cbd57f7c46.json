{"ast":null,"code":"import _pick from \"lodash/pick\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { PointerLink } from 'components';\nimport { LINKED_LIST_BLOCK_WIDTH, LINKED_LIST_BLOCK_HEIGHT, LINKED_LIST_CORNER_RADIUS } from \"../../constants\";\nconst OFFSET_FOR_ARROW = 7;\n\nclass LinkedListPointer extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  caculatePathOfPointer() {\n    const {\n      linkedListModel,\n      nodeAboutToAppear,\n      from,\n      to\n    } = this.props;\n    let {\n      x,\n      y,\n      visible\n    } = linkedListModel.find(({\n      key\n    }) => key === from);\n    if (typeof to !== 'number' || !visible) return null;\n    let {\n      x: x1,\n      y: y1\n    } = linkedListModel.find(({\n      key\n    }) => key === to);\n    const indexDistance = this.fromAndToIndexDistance();\n    const startFromTailOfFromNode = {\n      x: x + LINKED_LIST_BLOCK_WIDTH - 10,\n      y: y + LINKED_LIST_BLOCK_HEIGHT / 2\n    };\n    const startFromHeadOfFromNode = {\n      x: x,\n      y: y + LINKED_LIST_BLOCK_HEIGHT / 2\n    }; // One node ahead\n\n    if (indexDistance === 1) {\n      const start = _objectSpread({}, startFromTailOfFromNode);\n\n      let finish;\n\n      if (nodeAboutToAppear.has(from)) {\n        finish = _objectSpread({}, start);\n      } else {\n        finish = {\n          x: x1,\n          y: y1 + LINKED_LIST_BLOCK_HEIGHT / 2\n        };\n      }\n\n      return `M ${start.x} ${start.y} L ${finish.x - OFFSET_FOR_ARROW} ${finish.y}`;\n    } // One node behind\n\n\n    if (indexDistance === -1) {\n      const start = _objectSpread({}, startFromHeadOfFromNode);\n\n      let finish;\n\n      if (nodeAboutToAppear.has(from)) {\n        finish = _objectSpread({}, start);\n      } else {\n        finish = {\n          x: x1 + LINKED_LIST_BLOCK_WIDTH,\n          y: y1 + LINKED_LIST_BLOCK_HEIGHT / 2\n        };\n      }\n\n      return `M ${start.x} ${start.y} L ${finish.x + OFFSET_FOR_ARROW} ${finish.y}`;\n    } // Many node behind\n\n\n    if (indexDistance < -1) {\n      const start = _objectSpread({}, startFromTailOfFromNode);\n\n      let finish;\n\n      if (nodeAboutToAppear.has(from)) {\n        finish = _objectSpread({}, start);\n      } else {\n        finish = {\n          x: x1 + LINKED_LIST_BLOCK_WIDTH / 2,\n          y: y1 + LINKED_LIST_BLOCK_HEIGHT\n        };\n      }\n\n      return `M ${start.x} ${start.y} h 40 ${this.caculateRoundCornerPath(2)} v 92 ${this.caculateRoundCornerPath(3)} H ${finish.x + LINKED_LIST_CORNER_RADIUS} ${this.caculateRoundCornerPath(4)} V ${finish.y + OFFSET_FOR_ARROW}`;\n    }\n  } // 1 ------ 2\n  // ----------\n  // ----------\n  // 4 ------ 3\n\n\n  caculateRoundCornerPath(cornerNumber) {\n    switch (cornerNumber) {\n      case 1:\n        return `a ${LINKED_LIST_CORNER_RADIUS} ${LINKED_LIST_CORNER_RADIUS} 135 0 1 ${LINKED_LIST_CORNER_RADIUS} ${-LINKED_LIST_CORNER_RADIUS}`;\n\n      case 2:\n        return `a ${LINKED_LIST_CORNER_RADIUS} ${LINKED_LIST_CORNER_RADIUS} 135 0 1 ${LINKED_LIST_CORNER_RADIUS} ${LINKED_LIST_CORNER_RADIUS}`;\n\n      case 3:\n        return `a ${LINKED_LIST_CORNER_RADIUS} ${LINKED_LIST_CORNER_RADIUS} -135 0 1 ${-LINKED_LIST_CORNER_RADIUS} ${LINKED_LIST_CORNER_RADIUS}`;\n\n      case 4:\n        return `a ${LINKED_LIST_CORNER_RADIUS} ${LINKED_LIST_CORNER_RADIUS} -135 0 1 ${-LINKED_LIST_CORNER_RADIUS} ${-LINKED_LIST_CORNER_RADIUS}`;\n    }\n  } // We ignore the node which is not visible anymore\n\n\n  fromAndToIndexDistance() {\n    const {\n      from,\n      to,\n      linkedListModel\n    } = this.props;\n    const fromNode = linkedListModel.findIndex(({\n      key\n    }) => key === from);\n    const toNode = linkedListModel.findIndex(({\n      key\n    }) => key === to);\n    let nodeInBetween;\n    if (fromNode < toNode) nodeInBetween = linkedListModel.slice(fromNode + 1, toNode);else nodeInBetween = linkedListModel.slice(toNode + 1, fromNode);\n    return (nodeInBetween.filter(({\n      visible\n    }) => visible).length + 1) * (fromNode < toNode ? 1 : -1);\n  }\n\n  getArrowDirection() {\n    const distance = this.fromAndToIndexDistance();\n    if (distance === 1) return 'right';\n    if (distance === -1) return 'left';\n    if (distance > 1) return 'down';\n    if (distance < -1) return 'up';\n  }\n\n  render() {\n    const path = this.caculatePathOfPointer();\n\n    const propsToPass = _pick(this.props, ['following', 'visited', 'visible']);\n\n    return path ? __jsx(PointerLink, _extends({}, propsToPass, {\n      path: path,\n      arrowDirection: this.getArrowDirection()\n    })) : null;\n  }\n\n}\n\nexport default LinkedListPointer;","map":null,"metadata":{},"sourceType":"module"}