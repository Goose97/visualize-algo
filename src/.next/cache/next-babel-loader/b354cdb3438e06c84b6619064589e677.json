{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport BezierEasing from 'bezier-easing';\nimport { PanZoomController, CanvasObserver } from 'components';\nimport { performAnimation } from 'utils';\nconst SCALE_FACTOR_STEP = 0.2;\n\nclass CanvasContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"ref\", void 0);\n\n    _defineProperty(this, \"caculateViewBox\", () => {\n      const svgElement = this.ref.current;\n\n      if (svgElement) {\n        const container = svgElement.parentNode;\n        const {\n          width,\n          height\n        } = container.getBoundingClientRect();\n        this.setState({\n          viewBox: {\n            width,\n            height\n          }\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleZoom\", inOrOut => () => {\n      const {\n        scaleFactor\n      } = this.state;\n      const targetScaleFactor = inOrOut === 'in' ? scaleFactor + SCALE_FACTOR_STEP : scaleFactor - SCALE_FACTOR_STEP;\n      performAnimation({\n        startValue: scaleFactor,\n        endValue: targetScaleFactor,\n        duration: 300,\n        callback: newScaleFactor => this.setState({\n          scaleFactor: newScaleFactor\n        }),\n        cubicBezierFunction: BezierEasing(1, 0.02, 0.66, 0.74)\n      });\n    });\n\n    _defineProperty(this, \"handlePanning\", (deltaX, deltaY) => {\n      const {\n        translateFromOrigin: {\n          x,\n          y\n        }\n      } = this.state;\n      this.setState({\n        translateFromOrigin: {\n          x: x - deltaX,\n          y: y - deltaY\n        }\n      });\n    });\n\n    this.ref = React.createRef();\n    this.state = {\n      viewBox: null,\n      scaleFactor: 1,\n      translateFromOrigin: {\n        x: 0,\n        y: 0\n      }\n    };\n  }\n\n  componentWillUnmount() {\n    this.cleanUpEventListener();\n  }\n\n  componentDidMount() {\n    this.setUpEventListener();\n    this.caculateViewBox();\n    CanvasObserver.initiate();\n  }\n\n  setUpEventListener() {\n    window.addEventListener('resize', this.caculateViewBox);\n  }\n\n  cleanUpEventListener() {\n    window.removeEventListener('resize', this.caculateViewBox);\n  } // TODO: debounce ham nay\n\n\n  produceViewBox() {\n    const {\n      viewBox,\n      scaleFactor,\n      translateFromOrigin: {\n        x,\n        y\n      }\n    } = this.state;\n\n    if (viewBox) {\n      const {\n        width,\n        height\n      } = viewBox;\n      return `${x} ${y} ${Math.round(width / scaleFactor)} ${Math.round(height / scaleFactor)}`;\n    } else {\n      return '0 0 1500 1500';\n    }\n  }\n\n  getHTMLTransform() {\n    const {\n      translateFromOrigin: {\n        x,\n        y\n      },\n      scaleFactor\n    } = this.state;\n    return `translate(${-x * scaleFactor}px, ${-y * scaleFactor}px)`;\n  }\n\n  render() {\n    const {\n      scaleFactor\n    } = this.state;\n    const {\n      children\n    } = this.props;\n    return __jsx(\"div\", {\n      className: \"canvas-container\",\n      \"scale-factor\": scaleFactor\n    }, __jsx(\"svg\", {\n      viewBox: this.produceViewBox(),\n      preserveAspectRatio: \"xMinYMin slice\",\n      ref: this.ref\n    }, children), __jsx(\"div\", {\n      id: \"html-overlay\",\n      style: {\n        transform: this.getHTMLTransform()\n      }\n    }), __jsx(PanZoomController, {\n      onZoomIn: this.handleZoom('in'),\n      onZoomOut: this.handleZoom('out'),\n      onPanning: this.handlePanning\n    }));\n  }\n\n}\n\nexport default CanvasContainer;","map":null,"metadata":{},"sourceType":"module"}