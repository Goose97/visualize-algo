{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport ReactDOM from 'react-dom';\n\nvar HTMLRenderer = /*#__PURE__*/function () {\n  function HTMLRenderer() {\n    _classCallCheck(this, HTMLRenderer);\n  }\n\n  _createClass(HTMLRenderer, null, [{\n    key: \"inject\",\n    value: function inject(component, coordinate, key) {\n      var htmlOverlay = document.getElementById('html-overlay');\n      if (!htmlOverlay) throw new Error(\"A div with id='html-overlay' must exist\");\n      var wrapperDiv = HTMLRenderer.createOrUpdateWrapperDiv(htmlOverlay, coordinate, key);\n      ReactDOM.render(component, wrapperDiv);\n    } // Check if the id already exist, if not we should create a new wrapper\n    // Also check if we need to change the coordinate\n\n  }, {\n    key: \"createOrUpdateWrapperDiv\",\n    value: function createOrUpdateWrapperDiv(htmlOverlay, coordinate, key) {\n      var x = coordinate.x,\n          y = coordinate.y;\n      var wrapperDiv = document.getElementById(key);\n\n      if (wrapperDiv) {\n        // Update if necessary\n        var currentLeft = _parseInt(wrapperDiv.style.left);\n\n        var currentRight = _parseInt(wrapperDiv.style.right);\n\n        if (currentLeft !== x) wrapperDiv.style.left = \"\".concat(x, \"px\");\n        if (currentRight !== y) wrapperDiv.style.top = \"\".concat(y, \"px\");\n      } else {\n        // Create new one\n        wrapperDiv = document.createElement('div');\n        wrapperDiv.id = key;\n        wrapperDiv.style.position = 'absolute';\n        wrapperDiv.style.left = \"\".concat(x, \"px\");\n        wrapperDiv.style.top = \"\".concat(y, \"px\");\n      }\n\n      htmlOverlay.appendChild(wrapperDiv);\n      return wrapperDiv;\n    }\n  }, {\n    key: \"getHTMLOverlayPosition\",\n    value: function getHTMLOverlayPosition() {\n      var htmlOverlay = document.getElementById('html-overlay');\n      if (htmlOverlay) return htmlOverlay.getBoundingClientRect();else return null;\n    }\n  }]);\n\n  return HTMLRenderer;\n}();\n\nexport { HTMLRenderer as default };","map":null,"metadata":{},"sourceType":"module"}