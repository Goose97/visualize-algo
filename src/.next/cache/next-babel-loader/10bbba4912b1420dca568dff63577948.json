{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { VisualAlgo } from \"../layout\";\nimport { DEFAULT_SIDEBAR_WIDTH } from \"../constants\";\n\nfunction withDSPage(initObject) {\n  return Page => {\n    class WrapperComponent extends Component {\n      constructor(props) {\n        super(props);\n\n        _defineProperty(this, \"visualAlgoRef\", void 0);\n\n        _defineProperty(this, \"handleStepChange\", stepIndex => {\n          this.setState({\n            currentStep: stepIndex\n          });\n        });\n\n        _defineProperty(this, \"handlePlayingChange\", newPlayingState => {\n          this.setState({\n            autoPlay: newPlayingState\n          });\n        });\n\n        _defineProperty(this, \"handleExecuteApi\", async (api, params) => {\n          const {\n            executedApiCount\n          } = this.state;\n          const stepDescription = this.generateStepDescription(api, params);\n          const isSwitchingToNewApi = executedApiCount !== 0;\n          if (isSwitchingToNewApi) await this.resetVisualAlgoState();\n          this.setState({\n            stepDescription,\n            autoPlay: true,\n            currentApi: api,\n            executedApiCount: executedApiCount + 1,\n            currentStep: -1\n          });\n        });\n\n        _defineProperty(this, \"handleSideBarWidthChange\", newWidth => {\n          const {\n            data\n          } = this.state;\n          if (!data) this.setState({\n            sideBarWidth: newWidth\n          });\n        });\n\n        _defineProperty(this, \"handleDataChange\", newData => {\n          this.setState({\n            data: newData\n          });\n        });\n\n        this.state = {\n          stepDescription: [],\n          autoPlay: false,\n          executedApiCount: 0,\n          sideBarWidth: DEFAULT_SIDEBAR_WIDTH\n        };\n        this.visualAlgoRef = React.createRef();\n      }\n\n      resetVisualAlgoState() {\n        const component = this.visualAlgoRef.current;\n\n        if (component) {\n          component.resetForNewApi();\n        }\n      }\n\n      generateStepDescription(currentApi, params) {\n        const {\n          instructionGenerator\n        } = initObject;\n        const {\n          data\n        } = this.state;\n        if (!currentApi) return [];\n        return instructionGenerator(data, currentApi, params);\n      }\n\n      render() {\n        const {\n          currentApi,\n          stepDescription,\n          autoPlay\n        } = this.state;\n        const {\n          code,\n          explanation\n        } = initObject; //@ts-ignore\n\n        const _this$props = this.props,\n              {\n          innerRef\n        } = _this$props,\n              rest = _objectWithoutProperties(_this$props, [\"innerRef\"]);\n\n        return __jsx(VisualAlgo //@ts-ignore\n        , {\n          code: currentApi && code[currentApi] //@ts-ignore\n          ,\n          explanation: currentApi && explanation[currentApi],\n          stepDescription: stepDescription,\n          onStepChange: this.handleStepChange,\n          autoPlay: autoPlay,\n          onPlayingChange: this.handlePlayingChange,\n          ref: this.visualAlgoRef,\n          disableProgressControl: !currentApi,\n          onSideBarWidthChange: this.handleSideBarWidthChange\n        }, __jsx(Page, _extends({}, rest, this.state, {\n          ref: innerRef,\n          onDataChange: this.handleDataChange,\n          onExecuteApi: this.handleExecuteApi\n        })));\n      }\n\n    }\n\n    return React.forwardRef((props, ref) => //@ts-ignore\n    __jsx(WrapperComponent, _extends({\n      innerRef: ref\n    }, props)));\n  };\n}\n\nexport default withDSPage;","map":null,"metadata":{},"sourceType":"module"}