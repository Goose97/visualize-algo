{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport produce from 'immer';\nimport { caculateKeyHash } from 'components/HashTable/helper';\nimport { HASH_TABLE_UNIVERSAL_KEY_SIZE } from \"../constants\"; // Nhận vào trạng thái hiện tại của data structure\n// và operation tương ứng. Trả về trạng thái mới\n\nvar transformHashTableModel = function transformHashTableModel(currentModel, operation, payload) {\n  switch (operation) {\n    case 'insert':\n      {\n        var _payload = _slicedToArray(payload, 2),\n            key = _payload[0],\n            value = _payload[1];\n\n        return produce(currentModel, function (draft) {\n          var address = caculateKeyHash(key, HASH_TABLE_UNIVERSAL_KEY_SIZE);\n          var addressInfo = draft.memoryAddresses.find(function (_ref) {\n            var key = _ref.key;\n            return key === address;\n          });\n\n          if (addressInfo) {\n            addressInfo.values.unshift(value);\n          } else {\n            addressInfo = {\n              key: address,\n              values: [value]\n            };\n          }\n\n          draft.keys.push({\n            key: key,\n            value: value,\n            isNew: true,\n            address: address\n          });\n        });\n      }\n\n    case 'insertKey':\n      {\n        var _payload2 = _slicedToArray(payload, 2),\n            _key = _payload2[0],\n            _value = _payload2[1];\n\n        return produce(currentModel, function (draft) {\n          var address = caculateKeyHash(_key, HASH_TABLE_UNIVERSAL_KEY_SIZE);\n          draft.keys.push({\n            key: _key,\n            value: _value,\n            isNew: true,\n            address: address\n          });\n        });\n      }\n\n    case 'updateKeyAddress':\n      {\n        var _payload3 = _slicedToArray(payload, 2),\n            _key2 = _payload3[0],\n            address = _payload3[1];\n\n        return produce(currentModel, function (draft) {\n          var keyToUpdate = draft.keys.find(function (_ref2) {\n            var itemKey = _ref2.key;\n            return _key2 === itemKey;\n          });\n          if (keyToUpdate) keyToUpdate.address = address;\n        });\n      }\n\n    case 'insertValue':\n      {\n        var _payload4 = _slicedToArray(payload, 2),\n            _value2 = _payload4[0],\n            _address = _payload4[1];\n\n        return produce(currentModel, function (draft) {\n          var addressInfo = draft.memoryAddresses.find(function (_ref3) {\n            var key = _ref3.key;\n            return key === _address;\n          });\n\n          if (addressInfo) {\n            addressInfo.values.unshift(_value2);\n          } else {\n            draft.memoryAddresses.push({\n              key: _address,\n              values: [_value2]\n            });\n          }\n        });\n      }\n\n    case 'delete':\n      {\n        var _payload5 = _slicedToArray(payload, 1),\n            _key3 = _payload5[0];\n\n        return produce(currentModel, function (draft) {\n          var _draft$keys$find;\n\n          // Delete value in memory address\n          var address = caculateKeyHash(_key3, HASH_TABLE_UNIVERSAL_KEY_SIZE);\n          var memoryAddress = draft.memoryAddresses.find(function (_ref4) {\n            var key = _ref4.key;\n            return key === address;\n          });\n          var valueOfKey = (_draft$keys$find = draft.keys.find(function (_ref5) {\n            var itemKey = _ref5.key;\n            return _key3 === itemKey;\n          })) === null || _draft$keys$find === void 0 ? void 0 : _draft$keys$find.value;\n          memoryAddress.values = memoryAddress.values.filter(function (value) {\n            return value !== valueOfKey;\n          }); // Delete key\n\n          var keyToDelete = draft.keys.findIndex(function (_ref6) {\n            var itemKey = _ref6.key;\n            return _key3 === itemKey;\n          });\n          draft.keys.splice(keyToDelete, 1);\n        });\n      }\n\n    case 'toggleIsNew':\n      {\n        var _payload6 = _slicedToArray(payload, 1),\n            _key4 = _payload6[0];\n\n        return produce(currentModel, function (draft) {\n          var keyToToggle = draft.keys.find(function (_ref7) {\n            var itemKey = _ref7.key;\n            return _key4 === itemKey;\n          });\n\n          if (keyToToggle) {\n            var oldIsNew = !!keyToToggle.isNew;\n            keyToToggle.isNew = !oldIsNew;\n          }\n        });\n      }\n\n    case 'highlightKey':\n      {\n        var _payload7 = _slicedToArray(payload, 1),\n            _key5 = _payload7[0];\n\n        return produce(currentModel, function (draft) {\n          var keyToHighlight = draft.keys.find(function (_ref8) {\n            var itemKey = _ref8.key;\n            return _key5 === itemKey;\n          });\n          if (keyToHighlight) keyToHighlight.highlight = true;\n        });\n      }\n\n    case 'highlightAddress':\n      {\n        // Sometimes the address we want to highlight is not exist yet in modal\n        // insert a empty one in\n        var _payload8 = _slicedToArray(payload, 1),\n            _address2 = _payload8[0];\n\n        return produce(currentModel, function (draft) {\n          var addressToHighlight = draft.memoryAddresses.find(function (_ref9) {\n            var key = _ref9.key;\n            return key === _address2;\n          });\n          if (addressToHighlight) addressToHighlight.highlight = true;else {\n            var emptyAddress = {\n              key: _address2,\n              values: [],\n              highlight: true\n            };\n            draft.memoryAddresses.push(emptyAddress);\n          }\n        });\n      }\n\n    case 'dehighlightAddress':\n      {\n        var _payload9 = _slicedToArray(payload, 1),\n            _address3 = _payload9[0];\n\n        return produce(currentModel, function (draft) {\n          var addressToHighlight = draft.memoryAddresses.find(function (_ref10) {\n            var key = _ref10.key;\n            return key === _address3;\n          });\n          if (addressToHighlight) addressToHighlight.highlight = false;\n        });\n      }\n\n    case 'deleteKey':\n      {\n        var _payload10 = _slicedToArray(payload, 1),\n            _key6 = _payload10[0];\n\n        return produce(currentModel, function (draft) {\n          draft.keys = draft.keys.filter(function (_ref11) {\n            var itemKey = _ref11.key;\n            return _key6 !== itemKey;\n          });\n        });\n      }\n\n    case 'deleteValue':\n      {\n        var _payload11 = _slicedToArray(payload, 2),\n            _value3 = _payload11[0],\n            _address4 = _payload11[1];\n\n        return produce(currentModel, function (draft) {\n          var addressToDelete = draft.memoryAddresses.find(function (_ref12) {\n            var key = _ref12.key;\n            return key === _address4;\n          });\n\n          if (addressToDelete) {\n            var valuesAfterDelete = addressToDelete.values.filter(function (item) {\n              return item !== _value3;\n            });\n            if (valuesAfterDelete.length) addressToDelete.values = valuesAfterDelete;else {\n              draft.memoryAddresses = draft.memoryAddresses.filter(function (_ref13) {\n                var key = _ref13.key;\n                return key !== _address4;\n              });\n            }\n          }\n        });\n      }\n\n    case 'resetAll':\n      {\n        return produce(currentModel, function (draft) {\n          draft.keys.forEach(function (key) {\n            return key.highlight = false;\n          });\n          draft.memoryAddresses.forEach(function (address) {\n            return address.highlight = false;\n          });\n        });\n      }\n\n    default:\n      return currentModel;\n  }\n};\n\nexport default transformHashTableModel;","map":null,"metadata":{},"sourceType":"module"}