{"ast":null,"code":"import _Popover from \"antd/lib/popover\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { QuestionOutlined } from '@ant-design/icons';\nimport { AnimationTaskQueue } from 'utils';\nexport class PanZoomController extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"wrapperRef\", void 0);\n\n    _defineProperty(this, \"animationQueue\", void 0);\n\n    _defineProperty(this, \"trackingMouseMove\", e => {\n      const {\n        movementX,\n        movementY\n      } = e;\n      e.stopPropagation();\n      e.preventDefault();\n      this.animationQueue.enqueue({\n        x: movementX,\n        y: movementY\n      });\n    });\n\n    _defineProperty(this, \"handleAnimationQueueTask\", ({\n      x,\n      y\n    }) => {\n      const {\n        onPanning\n      } = this.props;\n      onPanning(x, y);\n    });\n\n    this.wrapperRef = React.createRef();\n    this.animationQueue = new AnimationTaskQueue({\n      callback: this.handleAnimationQueueTask,\n      isAdditiveTask: true,\n      combineTaskCallback: tasks => tasks.reduce(({\n        x,\n        y\n      }, acc) => ({\n        x: acc.x + x,\n        y: acc.y + y\n      }), {\n        x: 0,\n        y: 0\n      }),\n      taskQueueMax: 5\n    });\n  }\n\n  componentDidMount() {\n    this.addPanListener();\n  }\n\n  addPanListener() {\n    try {\n      var _this$wrapperRef$curr;\n\n      const canvasElement = (_this$wrapperRef$curr = this.wrapperRef.current) === null || _this$wrapperRef$curr === void 0 ? void 0 : _this$wrapperRef$curr.parentNode;\n      canvasElement === null || canvasElement === void 0 ? void 0 : canvasElement.addEventListener('mousedown', () => canvasElement === null || canvasElement === void 0 ? void 0 : canvasElement.addEventListener('mousemove', this.trackingMouseMove));\n      canvasElement === null || canvasElement === void 0 ? void 0 : canvasElement.addEventListener('mouseup', () => canvasElement === null || canvasElement === void 0 ? void 0 : canvasElement.removeEventListener('mousemove', this.trackingMouseMove));\n    } catch (e) {\n      console.log('e', e);\n    }\n  }\n\n  renderHelperPopover() {\n    const content = __jsx(\"div\", null, \"Drag the screen to move data structure\");\n\n    return __jsx(_Popover, {\n      content: content,\n      placement: \"right\"\n    }, __jsx(\"div\", {\n      className: \"mb-4 fx-center f-big-1 shadow-1\"\n    }, __jsx(QuestionOutlined, null)));\n  }\n\n  render() {\n    const {\n      onZoomIn,\n      onZoomOut\n    } = this.props;\n    return __jsx(\"div\", {\n      className: \"zoom-controller__wrapper\",\n      ref: this.wrapperRef\n    }, this.renderHelperPopover(), __jsx(\"div\", {\n      className: \"mb-4 fx-center f-big-1 shadow-1 clickable\",\n      onClick: onZoomIn\n    }, \"+\"), __jsx(\"div\", {\n      className: \"mb-4 fx-center f-big-1 shadow-1 clickable\",\n      onClick: onZoomOut\n    }, \"-\"));\n  }\n\n}\nexport default PanZoomController;","map":null,"metadata":{},"sourceType":"module"}